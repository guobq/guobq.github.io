<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bq&#39;s notes</title>
  
  
  <link href="https://guobq.github.io/atom.xml" rel="self"/>
  
  <link href="https://guobq.github.io/"/>
  <updated>2021-11-17T14:28:23.826Z</updated>
  <id>https://guobq.github.io/</id>
  
  <author>
    <name>bq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过Navicat做MYSQL和SQLite的数据迁移</title>
    <link href="https://guobq.github.io/bq/10e1c3ea.html"/>
    <id>https://guobq.github.io/bq/10e1c3ea.html</id>
    <published>2021-10-13T16:00:00.000Z</published>
    <updated>2021-11-17T14:28:23.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MYSQL的数据迁移到SQLite"><a href="#MYSQL的数据迁移到SQLite" class="headerlink" title="MYSQL的数据迁移到SQLite"></a>MYSQL的数据迁移到SQLite</h2><h3 id="1-连接上MYSQL"><a href="#1-连接上MYSQL" class="headerlink" title="1. 连接上MYSQL"></a>1. 连接上MYSQL</h3><h3 id="2-sql-file导入MYSQL"><a href="#2-sql-file导入MYSQL" class="headerlink" title="2. sql file导入MYSQL"></a>2. <code>sql</code> file导入MYSQL</h3><h3 id="3-建立空SQLite数据库"><a href="#3-建立空SQLite数据库" class="headerlink" title="3. 建立空SQLite数据库"></a>3. 建立空SQLite数据库</h3><p>使用命令行工具创建空数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sqlite3 SQLITEDB.db</span></span><br></pre></td></tr></table></figure><h3 id="4-打开SQLite数据库"><a href="#4-打开SQLite数据库" class="headerlink" title="4. 打开SQLite数据库"></a>4. 打开SQLite数据库</h3><p><img src="https://raw.githubusercontent.com/guobq/mysource/master/PictureBed/Navicat%E6%89%93%E5%BC%80SQLite%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p><h3 id="5-导出MYSQL到SQLite-database"><a href="#5-导出MYSQL到SQLite-database" class="headerlink" title="5. 导出MYSQL到SQLite database"></a>5. 导出MYSQL到SQLite database</h3><p><img src="https://raw.githubusercontent.com/guobq/mysource/master/PictureBed/Navicat%E5%AF%BC%E5%87%BAMYSQL%E5%88%B0SQLite%20database.png"></p><p><img src="https://raw.githubusercontent.com/guobq/mysource/master/PictureBed/Navicat%E5%AF%BC%E5%87%BAMYSQL%E5%88%B0SQLite.png"></p><p>执行数据传输后，查看文件size，此时已有内容。</p><h3 id="6-验证内容"><a href="#6-验证内容" class="headerlink" title="6. 验证内容"></a>6. 验证内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sqlite3 SQLITEDB.db</span></span><br><span class="line"><span class="meta">sqilte3&gt;</span><span class="bash"> .tables</span></span><br></pre></td></tr></table></figure><p>或用DataGrip打开<code>SQLITEDB.db</code>查看</p><h2 id="SQLite数据迁移到MYSQL"><a href="#SQLite数据迁移到MYSQL" class="headerlink" title="SQLite数据迁移到MYSQL"></a>SQLite数据迁移到MYSQL</h2><p>SQLite的数据迁移到MYSQL的方法基本一致，最大的区别是在<code>第5步数据传输</code>时，对应的<code>源</code>和<code>目标</code>做一个对调，源为SQLite，目的为MYSQL的数据库。数据传输完成后，即可以看到数据导入到了MYSQL database中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MYSQL的数据迁移到SQLite&quot;&gt;&lt;a href=&quot;#MYSQL的数据迁移到SQLite&quot; class=&quot;headerlink&quot; title=&quot;MYSQL的数据迁移到SQLite&quot;&gt;&lt;/a&gt;MYSQL的数据迁移到SQLite&lt;/h2&gt;&lt;h3 id=&quot;1-连接上</summary>
      
    
    
    
    <category term="工具" scheme="https://guobq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="数据库" scheme="https://guobq.github.io/categories/%E5%B7%A5%E5%85%B7/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="mysql" scheme="https://guobq.github.io/tags/mysql/"/>
    
    <category term="SQLite" scheme="https://guobq.github.io/tags/SQLite/"/>
    
    <category term="Navicat" scheme="https://guobq.github.io/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>树莓派配置</title>
    <link href="https://guobq.github.io/bq/cfe260ea.html"/>
    <id>https://guobq.github.io/bq/cfe260ea.html</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-06-03T14:43:36.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ubuntu-server-system-boot-wifi配置"><a href="#ubuntu-server-system-boot-wifi配置" class="headerlink" title="ubuntu server system-boot wifi配置"></a>ubuntu server system-boot wifi配置</h3><p><a href="https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#3-wifi-or-ethernet">https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#3-wifi-or-ethernet</a></p><p>network-config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wifis:</span><br><span class="line">  wlan0:</span><br><span class="line">    dhcp4: true</span><br><span class="line">    optional: true</span><br><span class="line">    access-points:</span><br><span class="line">      &quot;gbqpchot&quot;:</span><br><span class="line">        password: &quot;23332333&quot;</span><br></pre></td></tr></table></figure><h3 id="修改wifi设置"><a href="#修改wifi设置" class="headerlink" title="修改wifi设置"></a>修改wifi设置</h3><p><a href="https://blog.csdn.net/lps11188/article/details/112058379">https://blog.csdn.net/lps11188/article/details/112058379</a></p><p>网线直连,网络共享,dos命令<code>arp -a</code> 接口192.168.137.1下的ip中找到树莓派的ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/netplan</span><br></pre></td></tr></table></figure><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eth0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wifis:</span></span><br><span class="line">      <span class="attr">wlan0:</span></span><br><span class="line">          <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">access-points:</span></span><br><span class="line">              <span class="string">&quot;wifi名&quot;</span><span class="string">:</span></span><br><span class="line">                  <span class="attr">password:</span> <span class="string">&quot;wifi密码&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netplan try #或</span><br><span class="line">netplan apply</span><br></pre></td></tr></table></figure><h3 id="花生壳内网穿透"><a href="#花生壳内网穿透" class="headerlink" title="花生壳内网穿透"></a>花生壳内网穿透</h3><p><a href="https://service.oray.com/question/11639.html">https://service.oray.com/question/11639.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载安装包</span></span><br><span class="line">wget https://dl-cdn.oray.com/hsk/linux/phtunnel_5_0_rapi_aarch64.deb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换管理员权限</span></span><br><span class="line">sudo -s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">dpkg -i phtunnel_5_0_rapi_aarch64.deb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 记录SN及密码</span></span><br><span class="line"> +--------------------------------------------------+</span><br><span class="line"> |           Oray Phtunnel Raspberry 5.0.0          |</span><br><span class="line"> +--------------------------------------------------+</span><br><span class="line"> |  SN: xxx   Default password: xxx  |</span><br><span class="line"> +--------------------------------------------------+</span><br><span class="line"> |    Remote Management Address http://b.oray.com   |</span><br><span class="line"> +--------------------------------------------------+</span><br><span class="line"><span class="meta">#</span><span class="bash"> phddns回车，可以看到扩展功能。phddns phddns（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|<span class="built_in">enable</span>（开机自启动）|<span class="built_in">disable</span>（关闭开机自启动）|version（版本）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">phddns  start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自启动</span></span><br><span class="line">phddns enable</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:当有线无线都连接时,断开有线需重启花生壳<code>phddns restart</code>(目测默认有线生效,网络切换需重启)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ubuntu-server-system-boot-wifi配置&quot;&gt;&lt;a href=&quot;#ubuntu-server-system-boot-wifi配置&quot; class=&quot;headerlink&quot; title=&quot;ubuntu server system-boot wi</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="工具与配置" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E5%B7%A5%E5%85%B7%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="树莓派" scheme="https://guobq.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>实用网站</title>
    <link href="https://guobq.github.io/bq/d834b91a.html"/>
    <id>https://guobq.github.io/bq/d834b91a.html</id>
    <published>2021-04-07T16:00:00.000Z</published>
    <updated>2021-09-11T14:34:57.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实用网站"><a href="#实用网站" class="headerlink" title="实用网站"></a>实用网站</h2><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><p><a href="https://github.com/junwen0301/Announcement">https://github.com/junwen0301/Announcement</a></p><h3 id="资源分享"><a href="#资源分享" class="headerlink" title="资源分享"></a>资源分享</h3><h4 id="视频剪辑、解压、录屏、思维导图"><a href="#视频剪辑、解压、录屏、思维导图" class="headerlink" title="视频剪辑、解压、录屏、思维导图"></a>视频剪辑、解压、录屏、思维导图</h4><p><a href="http://www.dayanzai.me/">http://www.dayanzai.me/</a></p><h4 id="正版软件"><a href="#正版软件" class="headerlink" title="正版软件"></a>正版软件</h4><p>Itellyou：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn</a></p><h3 id="在线服务"><a href="#在线服务" class="headerlink" title="在线服务"></a>在线服务</h3><h4 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h4><p>查看Linux命令如何工作<br><a href="https://www.explainshell.com/">https://www.explainshell.com/</a></p><h4 id="定制个性命令提示符"><a href="#定制个性命令提示符" class="headerlink" title="定制个性命令提示符"></a>定制个性命令提示符</h4><p>简单说就是个性化生成命令提示符，可将生成的代码写入到用户家目录的.bashrc或者可以设置全局变量文件/etc/profile对所有用户生效<br><a href="http://bashrcgenerator.com/">http://bashrcgenerator.com/</a><br>可参考：<a href="http://stackoverflow.com/questions/4133904/ps1-line-with-git-current-branch-and-colors">http://stackoverflow.com/questions/4133904/ps1-line-with-git-current-branch-and-colors</a></p><h4 id="通过RPG游戏练习VIM使用"><a href="#通过RPG游戏练习VIM使用" class="headerlink" title="通过RPG游戏练习VIM使用"></a>通过RPG游戏练习VIM使用</h4><p>通过RPG游戏练习VIM编辑器的使用，使用h,j,k,l字符移动人物来获得新的命令能力和搜集钥匙，查看帮助可使用:help<br><a href="https://vim-adventures.com/">https://vim-adventures.com/</a></p><h4 id="幕布"><a href="#幕布" class="headerlink" title="幕布"></a>幕布</h4><p>在线思维笔记工具,整理结构化的内容，构建清晰的思维逻辑<br><a href="https://mubu.io/">https://mubu.io/</a></p><h4 id="在线学习Git版本控制"><a href="#在线学习Git版本控制" class="headerlink" title="在线学习Git版本控制"></a>在线学习Git版本控制</h4><p>这个网站模拟了一个控制台<br><a href="https://try.github.io/">https://try.github.io/</a></p><h4 id="练习快捷键"><a href="#练习快捷键" class="headerlink" title="练习快捷键"></a>练习快捷键</h4><p>涵盖了vim、sublime、emacs、git等软件的快捷使用方式和友好的说明<br><a href="https://www.shortcutfoo.com/">https://www.shortcutfoo.com/</a></p><h4 id="免费编程书籍"><a href="#免费编程书籍" class="headerlink" title="免费编程书籍"></a>免费编程书籍</h4><p>以Github管理的方式搜集了免费的编程和系统管理等书籍<br><a href="https://github.com/EbookFoundation/free-programming-books">https://github.com/EbookFoundation/free-programming-books</a></p><h4 id="实时文本交互聊天"><a href="#实时文本交互聊天" class="headerlink" title="实时文本交互聊天"></a>实时文本交互聊天</h4><p>可以创建一个文档<a href="http://collabedit.com/yb22u%E5%A1%AB%E5%86%99%E7%9B%B8%E5%85%B3%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%80%89%E6%8B%A9%E8%AF%AD%E8%A8%80%EF%BC%9B%E7%84%B6%E5%90%8E%E5%8F%AF%E4%BB%A5%E5%B0%86%E6%AD%A4%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80%E5%8F%91%E7%BB%99%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%BA%BA%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BA%92%E7%9B%B8%E4%B9%8B%E9%97%B4%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E6%97%B6%E7%9C%8B%E5%88%B0%E5%AF%B9%E6%96%B9%E7%9A%84%E8%BE%93%E5%85%A5%EF%BC%8C%E6%9C%89%E9%AB%98%E4%BA%AE%E8%AF%AD%E6%B3%95%EF%BC%9B%E4%BD%BF%E7%94%A8%E5%9C%BA%E5%90%88%E5%98%9B%EF%BC%8C%E6%AF%94%E5%A6%82%E9%80%9A%E8%BF%87collabedit%E5%8F%AF%E4%BB%A5%E8%80%83%E9%87%8F%E5%AF%B9%E6%96%B9%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E7%AD%89">http://collabedit.com/yb22u填写相关的用户名和选择语言；然后可以将此文档地址发给另一个人，那么互相之间就可以实时看到对方的输入，有高亮语法；使用场合嘛，比如通过collabedit可以考量对方编程能力等</a><br><a href="http://collabedit.com/">http://collabedit.com/</a></p><h4 id="在线编写运行分享C-代码编辑器"><a href="#在线编写运行分享C-代码编辑器" class="headerlink" title="在线编写运行分享C++代码编辑器"></a>在线编写运行分享C++代码编辑器</h4><p>可在线编辑运行C++代码，亦可Ctrl+Z生成url分享给好友<br><a href="http://cpp.sh/">http://cpp.sh/</a></p><h4 id="浏览器运行虚拟机"><a href="#浏览器运行虚拟机" class="headerlink" title="浏览器运行虚拟机"></a>浏览器运行虚拟机</h4><p>在线运行虚拟机，可以选择下载虚拟机镜像也可以上传自己的iso，copy.sh在线运行虚拟机<br>源码：<a href="https://github.com/copy/v86">https://github.com/copy/v86</a><br><a href="http://copy.sh/">http://copy.sh/</a></p><h4 id="命令或记录网站"><a href="#命令或记录网站" class="headerlink" title="命令或记录网站"></a>命令或记录网站</h4><p>分享自己的CLI库，也可以学习借鉴别人的命令脚本<br><a href="https://www.commandlinefu.com/commands/browse">https://www.commandlinefu.com/commands/browse</a></p><h4 id="提供了Linux发行版的详细信息"><a href="#提供了Linux发行版的详细信息" class="headerlink" title="提供了Linux发行版的详细信息"></a>提供了Linux发行版的详细信息</h4><p>通过Distrowath不仅可以精确的查看互联网都有哪些流行的Linux发行版，还可以查看每个发行版的相关信息如默认桌面环境、默认应用程序及镜像的下载链接；堪称Linux的数据库<br><a href="https://distrowatch.com/">https://distrowatch.com/</a></p><h4 id="在线查看命令帮助"><a href="#在线查看命令帮助" class="headerlink" title="在线查看命令帮助"></a>在线查看命令帮助</h4><p>相当于系统内部的man、help、info等的综合<br><a href="http://linuxmanpages.com/">http://linuxmanpages.com/</a></p><h4 id="适用Linux环境的软件搜索引擎"><a href="#适用Linux环境的软件搜索引擎" class="headerlink" title="适用Linux环境的软件搜索引擎"></a>适用Linux环境的软件搜索引擎</h4><p>如果有款win下好用的软件想在linux下使用，或许可以通过AwesomeCow找到与其类似或者一样的软件，或者通过WINE<br><a href="http://awesomecow.com/">http://awesomecow.com/</a></p><h4 id="Linux好玩游戏合集"><a href="#Linux好玩游戏合集" class="headerlink" title="Linux好玩游戏合集"></a>Linux好玩游戏合集</h4><p><a href="http://www.penguspy.com/">http://www.penguspy.com/</a></p><h4 id="音-视频转txt"><a href="#音-视频转txt" class="headerlink" title="音/视频转txt"></a>音/视频转txt</h4><p><a href="https://beecut.cn/speech-to-text-online">https://beecut.cn/speech-to-text-online</a></p><h4 id="音乐下载"><a href="#音乐下载" class="headerlink" title="音乐下载"></a>音乐下载</h4><p><a href="https://taira-komori.jpn.org/freesoundcn.html">https://taira-komori.jpn.org/freesoundcn.html</a></p><p><a href="http://tool.liumingye.cn/music/?page=homePage">http://tool.liumingye.cn/music/?page=homePage</a> </p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>秘迹搜索：<a href="https://mijisou.com/">https://mijisou.com</a></p><p>小白盘:  <a href="https://www.xiaobaipan.com/">https://www.xiaobaipan.com</a></p><p>DogeDoge: <a href="https://www.dogedoge.com/">https://www.dogedoge.com/</a></p><p>GitLogs: <a href="https://www.gitlogs.com/">https://www.gitlogs.com/</a> </p><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><h5 id="大数据导航"><a href="#大数据导航" class="headerlink" title="大数据导航"></a>大数据导航</h5><p>包含：数据搜索、互联网趋势分析、全球互联网数据、BI 商业智能、实时数据工具、短视频数据平台、教育数据、城市开放数据等</p><p><a href="http://hao.199it.com/">http://hao.199it.com/</a></p><h5 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h5><p>Flourish</p><p>只要操作者把数据文件（例如 Excel 文件）上传到该平台就可以轻松完成可视化的工作。</p><p><a href="https://flourish.studio/">https://flourish.studio/</a></p><h4 id="PPT模板下载"><a href="#PPT模板下载" class="headerlink" title="PPT模板下载"></a>PPT模板下载</h4><p>优品PPT: <a href="http://www.ypppt.com/">http://www.ypppt.com</a></p><h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><p>拷贝兔</p><p><a href="https://cp.anyknew.com/">https://cp.anyknew.com</a></p><h4 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h4><p>我爱分享网</p><p><a href="http://www.zhanshaoyi.com/rjxz.html">http://www.zhanshaoyi.com/rjxz.html</a></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><h5 id="无损放大"><a href="#无损放大" class="headerlink" title="无损放大"></a>无损放大</h5><p><a href="http://bigjpg.com/zh">http://bigjpg.com/zh</a></p><p><a href="http://waifu2x.udp.jp/index.zh-CN.html">http://waifu2x.udp.jp/index.zh-CN.html</a></p><h5 id="照片抠图"><a href="#照片抠图" class="headerlink" title="照片抠图"></a>照片抠图</h5><p><a href="https://www.remove.bg/">https://www.remove.bg/</a> </p><h5 id="稿定设计-在线PS"><a href="#稿定设计-在线PS" class="headerlink" title="稿定设计(在线PS)"></a>稿定设计(在线PS)</h5><p><a href="https://www.uupoop.com/">https://www.uupoop.com/</a> </p><h5 id="图片素材"><a href="#图片素材" class="headerlink" title="图片素材"></a>图片素材</h5><p><a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a></p><p><img src="https://raw.githubusercontent.com/guobq/mysource/master/PictureBed/%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99.png"></p><h5 id="图片无损在线压缩"><a href="#图片无损在线压缩" class="headerlink" title="图片无损在线压缩"></a>图片无损在线压缩</h5><p><a href="https://tinypng.com/">https://tinypng.com/</a></p><h5 id="批量裁剪缩放"><a href="#批量裁剪缩放" class="headerlink" title="批量裁剪缩放"></a>批量裁剪缩放</h5><p><a href="https://www.smartresize.com/zh-cn">https://www.smartresize.com/zh-cn</a> </p><h5 id="GIF工具之家"><a href="#GIF工具之家" class="headerlink" title="GIF工具之家"></a>GIF工具之家</h5><p><a href="https://tool.gifhome.com/">https://tool.gifhome.com/</a></p><h4 id="个人信息伪造"><a href="#个人信息伪造" class="headerlink" title="个人信息伪造"></a>个人信息伪造</h4><p><a href="https://www.fakepersongenerator.com/">https://www.fakepersongenerator.com/</a></p><h4 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h4><p><a href="http://guozhivip.com/rank/">http://guozhivip.com/rank/</a></p><h4 id="系统怀旧"><a href="#系统怀旧" class="headerlink" title="系统怀旧"></a>系统怀旧</h4><p><a href="http://www.therestartpage.com/">http://www.therestartpage.com/</a></p><h4 id="查你出生的那年都发生了什么事"><a href="#查你出生的那年都发生了什么事" class="headerlink" title="查你出生的那年都发生了什么事"></a>查你出生的那年都发生了什么事</h4><p><a href="http://whathappenedinmybirthyear.com/">http://whathappenedinmybirthyear.com/</a></p><h4 id="快速定位背景音乐"><a href="#快速定位背景音乐" class="headerlink" title="快速定位背景音乐"></a>快速定位背景音乐</h4><p><a href="https://www.tunefind.com/">https://www.tunefind.com/</a></p><h4 id="最好的短网址服务"><a href="#最好的短网址服务" class="headerlink" title="最好的短网址服务"></a>最好的短网址服务</h4><p><a href="https://bit.ly/">https://bit.ly</a></p><h4 id="WikiHow专业的问题解答"><a href="#WikiHow专业的问题解答" class="headerlink" title="WikiHow专业的问题解答"></a>WikiHow专业的问题解答</h4><p><a href="https://zh.wikihow.com/">https://zh.wikihow.com/</a></p><h4 id="临时邮箱"><a href="#临时邮箱" class="headerlink" title="临时邮箱"></a>临时邮箱</h4><p><a href="https://temp-mail.org/zh/">https://temp-mail.org/zh/</a></p><p><a href="http://24mail.chacuo.net/">http://24mail.chacuo.net/</a></p><h4 id="临时接收手机验证码"><a href="#临时接收手机验证码" class="headerlink" title="临时接收手机验证码"></a>临时接收手机验证码</h4><p><a href="https://www.materialtools.com/">https://www.materialtools.com/</a></p><h4 id="冷门好用的免费素材网"><a href="#冷门好用的免费素材网" class="headerlink" title="冷门好用的免费素材网:"></a>冷门好用的免费素材网:</h4><p><a href="https://unsplash.com/">https://unsplash.com/</a></p><h4 id="给未来的自己发一封有意义的邮件"><a href="#给未来的自己发一封有意义的邮件" class="headerlink" title="给未来的自己发一封有意义的邮件:"></a>给未来的自己发一封有意义的邮件:</h4><p><a href="https://www.futureme.org/">https://www.futureme.org/</a></p><h4 id="灵感艺术创作"><a href="#灵感艺术创作" class="headerlink" title="灵感艺术创作"></a>灵感艺术创作</h4><p><a href="http://weavesilk.com/">http://weavesilk.com/</a></p><h4 id="网络测速"><a href="#网络测速" class="headerlink" title="网络测速"></a>网络测速</h4><p><a href="https://fast.com/">https://fast.com/</a></p><h4 id="病毒测试"><a href="#病毒测试" class="headerlink" title="病毒测试"></a>病毒测试</h4><p><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></p><h4 id="邮箱泄露测试"><a href="#邮箱泄露测试" class="headerlink" title="邮箱泄露测试"></a>邮箱泄露测试</h4><p><a href="https://haveibeenpwned.com/">https://haveibeenpwned.com/</a></p><h4 id="信息加密传输"><a href="#信息加密传输" class="headerlink" title="信息加密传输"></a>信息加密传输</h4><p><a href="https://privnote.com/">https://privnote.com/</a></p><h4 id="pdf在线编辑"><a href="#pdf在线编辑" class="headerlink" title="pdf在线编辑"></a>pdf在线编辑</h4><p><a href="https://www.pdfescape.com/">https://www.pdfescape.com</a></p><p><a href="https://www.pdfpai.com/">https://www.pdfpai.com/</a></p><h4 id="代码编程学习"><a href="#代码编程学习" class="headerlink" title="代码编程学习"></a>代码编程学习</h4><p><a href="https://www.codecademy.com/learn">https://www.codecademy.com/learn</a></p><h4 id="插图素材"><a href="#插图素材" class="headerlink" title="插图素材"></a>插图素材</h4><p><a href="https://undraw.co/">https://undraw.co/</a></p><h4 id="免费应用程序替代"><a href="#免费应用程序替代" class="headerlink" title="免费应用程序替代"></a>免费应用程序替代</h4><p><a href="https://alternativeto.net/">https://alternativeto.net/</a></p><h3 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h3><h4 id="Alison"><a href="#Alison" class="headerlink" title="Alison"></a>Alison</h4><p><a href="https://alison.com/">https://alison.com/</a></p><h4 id="未来学习"><a href="#未来学习" class="headerlink" title="未来学习"></a>未来学习</h4><p><a href="https://www.futurelearn.com/">https://www.futurelearn.com/</a></p><h4 id="卡登泽"><a href="#卡登泽" class="headerlink" title="卡登泽"></a>卡登泽</h4><p><a href="https://www.kadenze.com/">https://www.kadenze.com/</a></p><h4 id="斯坦福在线"><a href="#斯坦福在线" class="headerlink" title="斯坦福在线"></a>斯坦福在线</h4><p><a href="https://online.stanford.edu/">https://online.stanford.edu/</a></p><h4 id="乌迪米"><a href="#乌迪米" class="headerlink" title="乌迪米"></a>乌迪米</h4><p><a href="https://www.udemy.com/">https://www.udemy.com/</a></p><h4 id="Udacity"><a href="#Udacity" class="headerlink" title="Udacity"></a>Udacity</h4><p><a href="https://www.udacity.com/">https://www.udacity.com/</a></p><h4 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h4><p><a href="https://www.codecademy.com/">https://www.codecademy.com/</a></p><h4 id="Coursera"><a href="#Coursera" class="headerlink" title="Coursera"></a>Coursera</h4><p><a href="https://www.coursera.org/">https://www.coursera.org/</a></p><h4 id="达世币大会–学习编码"><a href="#达世币大会–学习编码" class="headerlink" title="达世币大会–学习编码"></a>达世币大会–学习编码</h4><p><a href="https://dash.generalassemb.ly/">https://dash.generalassemb.ly/</a></p><h4 id="edx"><a href="#edx" class="headerlink" title="edx"></a>edx</h4><p><a href="https://www.edx.org/">https://www.edx.org/</a></p><h4 id="开放学习"><a href="#开放学习" class="headerlink" title="开放学习"></a>开放学习</h4><p><a href="https://www.open.edu/openlearn/">https://www.open.edu/openlearn/</a></p><h4 id="开放学习计划"><a href="#开放学习计划" class="headerlink" title="开放学习计划"></a>开放学习计划</h4><p><a href="https://oli.cmu.edu/">https://oli.cmu.edu/</a></p><h4 id="github学习项目"><a href="#github学习项目" class="headerlink" title="github学习项目"></a>github学习项目</h4><h5 id="构建你自己的-X"><a href="#构建你自己的-X" class="headerlink" title="构建你自己的 X"></a>构建你自己的 X</h5><p>如果你想要做些什么，并且想要获得一些关于如何实现它的指导，这是一个很好的资源。通过浏览列表，你还会发现很多真正有趣的事情。<br>地址：<a href="https://github.com/danistefanovic/build-your-own-x">https://github.com/danistefanovic/build-your-own-x</a></p><h5 id="JavaScript-算法"><a href="#JavaScript-算法" class="headerlink" title="JavaScript 算法"></a>JavaScript 算法</h5><p>提供了很多不同的算法，一个详尽的数据结构列表，还有你可能在软件工程面试中遇到的一些典型问题的答案。<br>地址：<a href="https://github.com/trekhleb/javascript-algorithms">https://github.com/trekhleb/javascript-algorithms</a></p><h5 id="OSSU"><a href="#OSSU" class="headerlink" title="OSSU"></a>OSSU</h5><p>OSSU 的课程为所有想要学习计算机科学的人提供了大量的免费学习资源。<br>地址：<a href="https://github.com/ossu/computer-science">https://github.com/ossu/computer-science</a></p><h5 id="代码-30-秒"><a href="#代码-30-秒" class="headerlink" title="代码 30 秒"></a>代码 30 秒</h5><p>超过 100 个代码段，涵盖了 JavaScript 中的各种内容，从典型的算法，到你可能会发现自己需要完成的常见任务。<br>地址：<a href="https://github.com/30-seconds/30-seconds-of-code">https://github.com/30-seconds/30-seconds-of-code</a></p><h5 id="真实世界示例应用"><a href="#真实世界示例应用" class="headerlink" title="真实世界示例应用"></a>真实世界示例应用</h5><p>有没有想过要学习如何使用特定的语言 / 技术开发适当的应用？这就是为你准备的 GitHub 仓库！这超出了典型的“ to-do”应用程序， RealWorld 的示例使整个“Medium-style”应用程序更加丰富，包括了所有的钟声、哨声和最佳实践。<br>地址：<a href="https://github.com/gothinkster/realworld">https://github.com/gothinkster/realworld</a></p><h5 id="免费编程书籍-1"><a href="#免费编程书籍-1" class="headerlink" title="免费编程书籍"></a>免费编程书籍</h5><p>大量的免费编程书籍可以帮助你的知识和理解更上一层楼。<br>地址：<a href="https://github.com/EbookFoundation/free-programming-books">https://github.com/EbookFoundation/free-programming-books</a></p><h5 id="系统设计入门"><a href="#系统设计入门" class="headerlink" title="系统设计入门"></a>系统设计入门</h5><p>拥有设计大型系统的能力是很有价值的<br>地址：<a href="https://github.com/donnemartin/system-design-primer">https://github.com/donnemartin/system-design-primer</a></p><h5 id="了不起的-Python"><a href="#了不起的-Python" class="headerlink" title="了不起的 Python"></a>了不起的 Python</h5><p>Python 内建了一系列不同的库、框架和技术的列表。对那些想要学习一种新的编程语言或仅仅想要提高对已有 Python 的了解的人来说，这是一个极好的指南。<br>地址：<a href="https://github.com/vinta/awesome-python">https://github.com/vinta/awesome-python</a></p><h5 id="node-最佳实践"><a href="#node-最佳实践" class="headerlink" title="node 最佳实践"></a>node 最佳实践</h5><p>自学的坏处之一就是，你并不总是从最佳实践开始。因此，拥有这些详细的指南可以帮助你快速提高技能。<br>地址：<a href="https://github.com/goldbergyoni/nodebestpractices">https://github.com/goldbergyoni/nodebestpractices</a></p><h5 id="超棒的机器学习"><a href="#超棒的机器学习" class="headerlink" title="超棒的机器学习"></a>超棒的机器学习</h5><p>像我们之前看到的 Python 清单一样，这个 GitHub 仓库包含大量不错的机器学习资源。<br>地址：<a href="https://github.com/josephmisiti/awesome-machine-learning">https://github.com/josephmisiti/awesome-machine-learning</a></p><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><p>Vudu <a href="https://www.vudu.com/">https://www.vudu.com/</a><br>看看TV （仅限在加拿大和澳洲地区使用） <a href="https://www.wekan.tv/">https://www.wekan.tv/</a><br>Tubi <a href="https://tubitv.com/">https://tubitv.com/</a><br>Bigdramas <a href="https://bigdramas.org/">https://bigdramas.org/</a><br>Popcornflix <a href="https://www.popcornflix.com/">https://www.popcornflix.com/</a><br>Pluto <a href="http://pluto.tv/">http://pluto.tv/</a><br>Youtube <a href="https://www.youtube.com/">https://www.youtube.com/</a><br>The Roku Channel <a href="https://therokuchannel.roku.com/">https://therokuchannel.roku.com/</a><br>Crackle <a href="https://www.crackle.com/">https://www.crackle.com/</a><br>Azm  <a href="https://azm.to/">https://azm.to/</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>越摇摆越快乐<br>网址：<a href="http://www.staggeringbeauty.com/">http://www.staggeringbeauty.com/</a><br>Reflect在线换脸<br>网址：<a href="https://reflect.tech/">https://reflect.tech/</a><br>图片动起来<br><a href="https://nodtotherhythm.com/make">https://nodtotherhythm.com/make</a><br>geoguessr（猜猜我在哪）<br>网址：<a href="https://geoguessr.com/">https://geoguessr.com</a><br>Click to start(测试自己的反应速度）<br>网址：<a href="https://www.humanbenchmark.com/tests/reactiontime">https://www.humanbenchmark.com/tests/reactiontime</a><br>重力点<br><a href="https://codepen.io/akm2/full/rHIsa">https://codepen.io/akm2/full/rHIsa</a><br>帮程序员减压放松的网站<br>网址：<a href="https://www.loungev.com/caribbean-lounge/">https://www.loungev.com/caribbean-lounge/</a><br>云游天下<br><a href="http://www.airpano.com/">http://www.airpano.com/</a><br>深海<br><a href="https://neal.fun/deep-sea/">https://neal.fun/deep-sea/</a><br>Firefox Monitor（安全邮箱检查）<br><a href="https://monitor.firefox.com/">https://monitor.firefox.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实用网站&quot;&gt;&lt;a href=&quot;#实用网站&quot; class=&quot;headerlink&quot; title=&quot;实用网站&quot;&gt;&lt;/a&gt;实用网站&lt;/h2&gt;&lt;h3 id=&quot;科学上网&quot;&gt;&lt;a href=&quot;#科学上网&quot; class=&quot;headerlink&quot; title=&quot;科学上网&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="资源" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="tool" scheme="https://guobq.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>实用免费软件</title>
    <link href="https://guobq.github.io/bq/88842480.html"/>
    <id>https://guobq.github.io/bq/88842480.html</id>
    <published>2021-04-07T16:00:00.000Z</published>
    <updated>2021-09-11T14:40:17.359Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实用免费软件"><a href="#实用免费软件" class="headerlink" title="实用免费软件"></a>实用免费软件</h3><h4 id="markdown编辑器"><a href="#markdown编辑器" class="headerlink" title="markdown编辑器"></a>markdown编辑器</h4><p>typora:<a href="https://typora.io/">https://typora.io/</a></p><h4 id="上传图片并获取图片网址链接"><a href="#上传图片并获取图片网址链接" class="headerlink" title="上传图片并获取图片网址链接"></a>上传图片并获取图片网址链接</h4><p>PicGo:<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><h4 id="ssh客户端"><a href="#ssh客户端" class="headerlink" title="ssh客户端"></a>ssh客户端</h4><p>MobaXterm:<a href="https://mobaxterm.mobatek.net/download-home-edition.html">https://mobaxterm.mobatek.net/download-home-edition.html</a></p><p>PuTTY:<a href="https://www.putty.org/">https://www.putty.org/</a></p><p>SimpleRemote:<a href="http://www.91fk.net/">http://www.91fk.net/</a></p><p>Finalshell:<a href="http://www.hostbuf.com/">http://www.hostbuf.com/</a></p><p>JuiceSSH:<a href="https://juicessh.com/">https://juicessh.com/</a></p><p>ServerCat:<a href="https://apps.apple.com/cn/app/servercat-linux-%E7%9B%91%E6%8E%A7-ssh-%E7%BB%88%E7%AB%AF/id1501532023">https://apps.apple.com/cn/app/servercat-linux-%E7%9B%91%E6%8E%A7-ssh-%E7%BB%88%E7%AB%AF/id1501532023</a></p><h4 id="redis客户端"><a href="#redis客户端" class="headerlink" title="redis客户端"></a>redis客户端</h4><p>Another-Redis-Desktop-Manager:<a href="https://github.com/qishibo/AnotherRedisDesktopManager">https://github.com/qishibo/AnotherRedisDesktopManager</a></p><h4 id="Hosts管理"><a href="#Hosts管理" class="headerlink" title="Hosts管理"></a>Hosts管理</h4><p>SwitchHosts:<a href="https://github.com/oldj/SwitchHosts">https://github.com/oldj/SwitchHosts</a></p><h4 id="office"><a href="#office" class="headerlink" title="office"></a>office</h4><p>onlyoffice: <a href="https://www.onlyoffice.com/zh/">https://www.onlyoffice.com/zh/</a><br>Libreoffice:<a href="https://www.libreoffice.org/">https://www.libreoffice.org/</a></p><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><p>KMSOffline – <a href="https://free.appnee.com/kmsoffline">https://free.appnee.com/kmsoffline</a><br>Office Tool Plus – <a href="https://otp.landian.vip/">https://otp.landian.vip</a></p><h4 id="虚拟定位"><a href="#虚拟定位" class="headerlink" title="虚拟定位"></a>虚拟定位</h4><p>爱思助手：<a href="https://www.i4.cn/">https://www.i4.cn</a><br>Fake GPS location：<a href="https://play.google.com/store/apps/details?id=com.lexa.fakegps&amp;hl=en_US&amp;gl=US">https://play.google.com/store/apps/details?id=com.lexa.fakegps&amp;hl=en_US&amp;gl=US</a></p><h4 id="在线实时视频抠图去背景"><a href="#在线实时视频抠图去背景" class="headerlink" title="在线实时视频抠图去背景"></a>在线实时视频抠图去背景</h4><p><a href="https://peterl1n.github.io/RobustVideoMatting">https://peterl1n.github.io/RobustVideoMatting</a><br>在线使用- <a href="https://peterl1n.github.io/RobustVideoMatting/#/demo">https://peterl1n.github.io/RobustVideoMatting/#/demo</a></p><h4 id="电脑远程控制"><a href="#电脑远程控制" class="headerlink" title="电脑远程控制"></a>电脑远程控制</h4><p>Remotely: <a href="https://remotely.one/">https://remotely.one/</a></p><h4 id="视频格式转换器"><a href="#视频格式转换器" class="headerlink" title="视频格式转换器"></a>视频格式转换器</h4><p>handbrake：<a href="https://handbrake.fr/">https://handbrake.fr/</a></p><h4 id="视频剪辑"><a href="#视频剪辑" class="headerlink" title="视频剪辑"></a>视频剪辑</h4><p>ShortCut: <a href="https://shotcut.org/">https://shotcut.org/</a><br>VideoPad：<a href="https://www.nchsoftware.com/videopad/index.html">https://www.nchsoftware.com/videopad/index.html</a><br>VSDC：<a href="http://www.videosoftdev.com/">http://www.videosoftdev.com/</a><br>HitFilm：<a href="https://fxhome.com/product/hitfilm-express">https://fxhome.com/product/hitfilm-express</a><br>Openshot：<a href="https://www.openshot.org/zh-hans/">https://www.openshot.org/zh-hans/</a><br>iMovie：<a href="https://www.apple.com/imovie/">https://www.apple.com/imovie/</a><br>DaVinci Resolve：<a href="http://www.blackmagicdesign.com/products/davinciresolve/">http://www.blackmagicdesign.com/products/davinciresolve/</a></p><h4 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h4><p>Potplay: <a href="https://potplayer.daum.net/">https://potplayer.daum.net</a><br>VLC: <a href="https://www.videolan.org/">https://www.videolan.org</a></p><h4 id="密码管理器"><a href="#密码管理器" class="headerlink" title="密码管理器"></a>密码管理器</h4><p>Bitwarden: <a href="https://bitwarden.com/">https://bitwarden.com/</a></p><h4 id="创建USB启动盘"><a href="#创建USB启动盘" class="headerlink" title="创建USB启动盘"></a>创建USB启动盘</h4><p>rufus：<a href="https://rufus.ie/">https://rufus.ie/</a></p><h4 id="windows系统优化"><a href="#windows系统优化" class="headerlink" title="windows系统优化"></a>windows系统优化</h4><p>dism++: <a href="https://www.chuyu.me/zh-Hans/">https://www.chuyu.me/zh-Hans/</a><br>Glarysoft: <a href="https://www.glarysoft.com/">https://www.glarysoft.com</a></p><h4 id="软件卸载"><a href="#软件卸载" class="headerlink" title="软件卸载"></a>软件卸载</h4><p>geekuninstaller: <a href="https://geekuninstaller.com/">https://geekuninstaller.com</a><br>WGestures：<a href="https://www.yingdev.com/projects/wgestures">https://www.yingdev.com/projects/wgestures</a></p><h4 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h4><p>KeePass：<a href="https://keepass.info/">https://keepass.info/</a></p><h4 id="高精度截图"><a href="#高精度截图" class="headerlink" title="高精度截图"></a>高精度截图</h4><p>Snipaste：<a href="https://www.snipaste.com/">https://www.snipaste.com/</a></p><h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><p>QTTabbar：<a href="http://qttabbar.wikidot.com/">http://qttabbar.wikidot.com/</a></p><h4 id="安全超频"><a href="#安全超频" class="headerlink" title="安全超频"></a>安全超频</h4><p>MSI Afterburner: <a href="https://www.msi.com/page/afterburner">https://www.msi.com/page/afterburner</a></p><h4 id="跨平台游戏连接"><a href="#跨平台游戏连接" class="headerlink" title="跨平台游戏连接"></a>跨平台游戏连接</h4><p>GOG星系： <a href="https://www.gog.com/galaxy">https://www.gog.com/galaxy</a></p><h4 id="超级进程管理"><a href="#超级进程管理" class="headerlink" title="超级进程管理"></a>超级进程管理</h4><p>SuperF4: <a href="https://stefansundin.github.io/superf4/">https://stefansundin.github.io/superf4/</a></p><h4 id="虚拟手机号"><a href="#虚拟手机号" class="headerlink" title="虚拟手机号"></a>虚拟手机号</h4><p>Textnow：<a href="https://www.textnow.com/">https://www.textnow.com/</a><br>Google Voice：<a href="https://voice.google.com/">https://voice.google.com/</a><br>textplus: <a href="https://textplus.com/">https://textplus.com/</a><br>nextplus:<br>（Android）<a href="https://play.google.com/store/apps/details?id=me.nextplus">https://play.google.com/store/apps/details?id=me.nextplus</a><br>（iPhone）：<a href="https://apps.apple.com/us/app/nextplus">https://apps.apple.com/us/app/nextplus</a></p><h4 id="PDF-to-Word"><a href="#PDF-to-Word" class="headerlink" title="PDF to Word"></a>PDF to Word</h4><p><a href="https://www.ilovepdf.com/">https://www.ilovepdf.com</a></p><h4 id="GIF动图制作"><a href="#GIF动图制作" class="headerlink" title="GIF动图制作"></a>GIF动图制作</h4><p><a href="https://www.screentogif.com/">https://www.screentogif.com/</a></p><h4 id="远程办公"><a href="#远程办公" class="headerlink" title="远程办公"></a>远程办公</h4><p><a href="https://www.teamviewer.com/">https://www.teamviewer.com</a><br><a href="https://remotedesktop.google.com/">https://remotedesktop.google.com</a></p><h4 id="快速文件索引软件"><a href="#快速文件索引软件" class="headerlink" title="快速文件索引软件"></a>快速文件索引软件</h4><p><a href="https://www.voidtools.com/">https://www.voidtools.com/</a></p><h4 id="Adobe-Photoshop-Express"><a href="#Adobe-Photoshop-Express" class="headerlink" title="Adobe Photoshop Express"></a>Adobe Photoshop Express</h4><p>Adobe Photoshop Express:<a href="https://www.microsoft.com/en-us/p/adobe-photoshop-express-image-editor-adjustments-filters-effects-borders/9wzdncrfj27n?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/adobe-photoshop-express-image-editor-adjustments-filters-effects-borders/9wzdncrfj27n?activetab=pivot%3Aoverviewtab</a></p><h4 id="pdf编辑"><a href="#pdf编辑" class="headerlink" title="pdf编辑"></a>pdf编辑</h4><p>Xodo PDF Reader &amp; Editor: <a href="https://www.microsoft.com/en-us/p/pdf-reader-view-edit-annotate-by-xodo/9wzdncrdjxp4?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/pdf-reader-view-edit-annotate-by-xodo/9wzdncrdjxp4?activetab=pivot%3Aoverviewtab</a></p><h4 id="音量分别调节"><a href="#音量分别调节" class="headerlink" title="音量分别调节"></a>音量分别调节</h4><p>EarTrumpet: <a href="https://www.microsoft.com/en-us/p/eartrumpet/9nblggh516xp?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/eartrumpet/9nblggh516xp?activetab=pivot%3Aoverviewtab</a></p><h4 id="轻量远程终端连接"><a href="#轻量远程终端连接" class="headerlink" title="轻量远程终端连接"></a>轻量远程终端连接</h4><p>Fluent Terminal: <a href="https://www.microsoft.com/en-us/p/fluent-terminal/9p2krlmfxf9t?activetab=pivot:overviewtab#">https://www.microsoft.com/en-us/p/fluent-terminal/9p2krlmfxf9t?activetab=pivot%3Aoverviewtab#</a></p><h4 id="图片混合"><a href="#图片混合" class="headerlink" title="图片混合"></a>图片混合</h4><p>Fused: <a href="https://www.microsoft.com/en-us/p/fused-double-exposure-video-and-photo-blender/9nblggh1jj6d?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/fused-double-exposure-video-and-photo-blender/9nblggh1jj6d?activetab=pivot%3Aoverviewtab</a></p><h4 id="语言学习"><a href="#语言学习" class="headerlink" title="语言学习"></a>语言学习</h4><p>Duolingo: <a href="https://www.microsoft.com/en-us/p/duolingo-learn-languages-for-free/9wzdncrcv5xn?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/duolingo-learn-languages-for-free/9wzdncrcv5xn?activetab=pivot%3Aoverviewtab</a></p><h4 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h4><p>Spotify: <a href="https://www.microsoft.com/en-us/p/spotify-music/9ncbcszsjrsb?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/spotify-music/9ncbcszsjrsb?activetab=pivot%3Aoverviewtab</a></p><h4 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h4><p>ShareX: <a href="https://www.microsoft.com/en-us/p/sharex/9nblggh4z1sp?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/sharex/9nblggh4z1sp?activetab=pivot%3Aoverviewtab</a><br>Screenrec: <a href="https://screenrec.com/">https://screenrec.com</a><br>Shadowplay: <a href="https://www.nvidia.com/en-us/geforce/geforce-experience/shadowplay/">https://www.nvidia.com/en-us/geforce/geforce-experience/shadowplay/</a><br>AMD ReLive: <a href="https://www.amd.com/zh-hans/technologies/radeon-software-gaming-media">https://www.amd.com/zh-hans/technologies/radeon-software-gaming-media</a><br>Captura: <a href="https://mathewsachin.github.io/Captura/">https://mathewsachin.github.io/Captura/</a><br>OBS Studio: <a href="https://obsproject.com/">https://obsproject.com/</a><br>oCam:<a href="https://ohsoft.net/eng/ocam/intro.php?cate=1002">https://ohsoft.net/eng/ocam/intro.php?cate=1002</a></p><h4 id="录音"><a href="#录音" class="headerlink" title="录音"></a>录音</h4><p>录音精灵:<a href="https://www.apowersoft.cn/streaming-audio-recorder">https://www.apowersoft.cn/streaming-audio-recorder</a></p><h4 id="磁盘监测"><a href="#磁盘监测" class="headerlink" title="磁盘监测"></a>磁盘监测</h4><p>CrystalDiskMark: <a href="https://www.microsoft.com/en-us/p/crystaldiskmark/9nblggh4z6f2?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/crystaldiskmark/9nblggh4z6f2?activetab=pivot%3Aoverviewtab</a> </p><h4 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h4><p>Movies &amp; TV: <a href="https://www.microsoft.com/zh-cn/p/movies-tv/9wzdncrfj3p2?activetab=pivot:overviewtab">https://www.microsoft.com/zh-cn/p/movies-tv/9wzdncrfj3p2?activetab=pivot%3Aoverviewtab</a><br>VLC: <a href="https://www.videolan.org/vlc/">https://www.videolan.org/vlc/</a></p><h4 id="三维动画设计"><a href="#三维动画设计" class="headerlink" title="三维动画设计"></a>三维动画设计</h4><p>Blender：<a href="https://www.blender.org/download/releases/">https://www.blender.org/download/releases/</a></p><h4 id="杀毒"><a href="#杀毒" class="headerlink" title="杀毒"></a>杀毒</h4><p>Bitdefender: <a href="https://www.bitdefender.com/solutions/free.html">https://www.bitdefender.com/solutions/free.html</a></p><p>kaspersky:  <a href="https://www.freedidi.com/go?url=https://www.kaspersky.com.cn/free-antivirus">https://www.kaspersky.com.cn/free-antivirus</a></p><p>小红伞（Avast： <a href="https://www.avira.com/zh-cn">https://www.avira.com/zh-cn</a></p><p>Avg:  <a href="https://www.avg.com/free-antivirus-download">https://www.avg.com/free-antivirus-download</a></p><p>Avira: <a href="https://www.avira.com/zh-cn/free-antivirus-windows">https://www.avira.com/zh-cn/free-antivirus-windows</a></p><h4 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h4><p>Thunderbird: <a href="https://www.thunderbird.net/">https://www.thunderbird.net/</a></p><h4 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h4><h5 id="Viber"><a href="#Viber" class="headerlink" title="Viber"></a>Viber</h5><p>App Store: <a href="https://apps.apple.com/app/id382617920?mt=8">https://apps.apple.com/app/id382617920?mt=8</a>)<br>Google Play: <a href="https://play.google.com/store/apps/details?id=com.viber.voip&amp;referrer=adjust_reftag=cTPTLBpxqNtYT&utm_source=Website&utm_campaign=download&utm_content=en&utm_term=1">https://play.google.com/store/apps/details?id=com.viber.voip&amp;referrer=adjust_reftag%3DcTPTLBpxqNtYT%26utm_source%3DWebsite%26utm_campaign%3Ddownload%26utm_content%3Den%26utm_term%3D1</a></p><h5 id="Silence"><a href="#Silence" class="headerlink" title="Silence"></a>Silence</h5><p>App Store: <a href="https://apps.apple.com/cn/app/silent-phone/id554269204">https://apps.apple.com/cn/app/silent-phone/id554269204</a><br>Google Play: <a href="https://play.google.com/store/apps/details?id=org.smssecure.smssecure">https://play.google.com/store/apps/details?id=org.smssecure.smssecure</a></p><h5 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h5><p>App Store: <a href="https://apps.apple.com/app/vector/id1083446067">https://apps.apple.com/app/vector/id1083446067</a><br>Google Play: <a href="https://play.google.com/store/apps/details?id=im.vector.app">https://play.google.com/store/apps/details?id=im.vector.app</a></p><h5 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h5><p>App Store: <a href="https://apps.apple.com/cn/app/telegram-messenger/id686449807">https://apps.apple.com/cn/app/telegram-messenger/id686449807</a><br>Google Play: <a href="https://play.google.com/store/apps/details?id=org.telegram.messenger">https://play.google.com/store/apps/details?id=org.telegram.messenger</a></p><h5 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h5><p>App Store: <a href="https://apps.apple.com/cn/app/signal-%E9%9A%90%E7%A7%81%E9%80%9A%E4%BF%A1%E5%B7%A5%E5%85%B7/id874139669">https://apps.apple.com/cn/app/signal-隐私通信工具/id874139669</a><br>Google Play: <a href="https://play.google.com/store/apps/detailsid=org.thoughtcrime.securesms&amp;hl">https://play.google.com/store/apps/detailsid=org.thoughtcrime.securesms&amp;hl</a><br>PC版下载: <a href="https://signal.org/download/">https://signal.org/download/</a></p><h4 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h4><p>Google meet: <a href="https://meet.google.com/">https://meet.google.com</a><br>Discord: <a href="https://discord.com/">https://discord.com</a><br>Microsoft Teams: <a href="https://www.microsoft.com/en-us/microsoft-365/microsoft-teams/group-chat-software">https://www.microsoft.com/en-us/microsoft-365/microsoft-teams/group-chat-software</a></p><h4 id="windows资源搜索"><a href="#windows资源搜索" class="headerlink" title="windows资源搜索"></a>windows资源搜索</h4><p>Everything<br><a href="https://www.voidtools.com/zh-cn/%E2%80%8B">https://www.voidtools.com/zh-cn/​</a></p><h4 id="音频编辑"><a href="#音频编辑" class="headerlink" title="音频编辑"></a>音频编辑</h4><p>Audicity<br><a href="https://www.audacityteam.org/%E2%80%8B">https://www.audacityteam.org/​</a></p><h4 id="绘画"><a href="#绘画" class="headerlink" title="绘画"></a>绘画</h4><p>Autodesk SketchBook<br><a href="https://sketchbook.com/%E2%80%8B">https://sketchbook.com/​</a></p><h4 id="电脑硬件信息"><a href="#电脑硬件信息" class="headerlink" title="电脑硬件信息"></a>电脑硬件信息</h4><p>HWiNFO<br><a href="https://www.hwinfo.com/">https://www.hwinfo.com​</a></p><h4 id="图像编辑"><a href="#图像编辑" class="headerlink" title="图像编辑"></a>图像编辑</h4><p>XnView MP<br><a href="https://www.xnview.com/">https://www.xnview.com​</a></p><p>gimp：<a href="https://www.gimp.org/">https://www.gimp.org</a></p><h4 id="屏幕录制"><a href="#屏幕录制" class="headerlink" title="屏幕录制"></a>屏幕录制</h4><p>Captura<br><a href="https://mathewsachin.github.io/Captura/%E2%80%8B">https://mathewsachin.github.io/Captura/​</a></p><h4 id="视频播放器"><a href="#视频播放器" class="headerlink" title="视频播放器"></a>视频播放器</h4><p>KMPlayer<br><a href="http://kmplayer.com/%E2%80%8B">http://kmplayer.com/​</a></p><p>PotPlayer：<a href="https://potplayer.daum.net/">https://potplayer.daum.net/</a></p><h4 id="谷歌地球"><a href="#谷歌地球" class="headerlink" title="谷歌地球"></a>谷歌地球</h4><p><a href="https://www.google.com/intl/zh-CN/earth/%E2%80%8B">https://www.google.com/intl/zh-CN/earth/​</a></p><h4 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h4><p>Notepad++<br><a href="https://notepad-plus-plus.org/downloads/%E2%80%8B">https://notepad-plus-plus.org/downloads/​</a></p><p>Sublime Text3：<a href="https://www.sublimetext.com/3">https://www.sublimetext.com/3</a></p><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><p>brave<br><a href="https://brave.com/zh/">https://brave.com/zh/</a></p><h4 id="文件去重"><a href="#文件去重" class="headerlink" title="文件去重"></a>文件去重</h4><p>DoubleKiller</p><p><a href="https://www.bigbangenterprises.de/en/doublekiller/">https://www.bigbangenterprises.de/en/doublekiller/</a></p><h4 id="快速预览"><a href="#快速预览" class="headerlink" title="快速预览"></a>快速预览</h4><p>Quicklook</p><p><a href="https://www.microsoft.com/en-us/p/quicklook/9nv4bs3l1h4s?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/quicklook/9nv4bs3l1h4s?activetab=pivot:overviewtab</a></p><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>7-Zip：<a href="https://www.7-zip.org/">https://www.7-zip.org</a></p><h4 id="视频压缩"><a href="#视频压缩" class="headerlink" title="视频压缩"></a>视频压缩</h4><p>handbrake：<a href="https://handbrake.fr/">https://handbrake.fr/</a></p><h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><p>DeepL</p><p><a href="https://www.deepl.com/translator">https://www.deepl.com/translator</a></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>XDM： <a href="https://subhra74.github.io/xdm/">https://subhra74.github.io/xdm/</a></p><p>IDM官方正版： <a href="https://bit.ly/3nj8baB">https://bit.ly/3nj8baB</a> </p><p>IDM开心版： <a href="https://www.lanzous.com/i91wjub">https://www.lanzous.com/i91wjub</a></p><p>IDM谷歌浏览器扩展程序：<a href="https://chrome.google.com/webstore/detail/idm-integration-module/ngpampappnmepgilojfohadhhmbhlaek">https://chrome.google.com/webstore/detail/idm-integration-module/ngpampappnmepgilojfohadhhmbhlaek</a></p><p>FDM： <a href="https://www.freedownloadmanager.org/zh/">https://www.freedownloadmanager.org/zh/</a></p><h4 id="安卓模拟器"><a href="#安卓模拟器" class="headerlink" title="安卓模拟器"></a>安卓模拟器</h4><p>GameLoop ：<a href="https://gameloop.fun/">https://gameloop.fun</a><br>LDplayer：<a href="https://www.ldplayer.net/">https://www.ldplayer.net</a><br>Android Studio’s ：<a href="https://developer.android.com/studio">https://developer.android.com/studio</a><br>NOX 夜神：<a href="https://www.yeshen.com/">https://www.yeshen.com/</a><br>BlueStacks：<a href="https://www.bluestacks.com/">https://www.bluestacks.com/</a><br>MSI appplayer ：<a href="https://www.msi.com/landing/appplayer">https://www.msi.com/landing/appplayer</a></p><p>Android in docker :  <a href="https://github.com/budtmo/docker-android">https://github.com/budtmo/docker-android</a></p><h4 id="种子下载"><a href="#种子下载" class="headerlink" title="种子下载"></a>种子下载</h4><h5 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h5><p>qbittorrent: <a href="https://www.qbittorrent.org/">https://www.qbittorrent.org</a><br>qbittorrent增强版: <a href="https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases">https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases</a><br>trackers地址：<a href="https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt">https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt</a><br>比特精灵: <a href="http://www.bitspirit.cc/">http://www.bitspirit.cc</a><br>Motrix: <a href="https://motrix.app/">https://motrix.app</a><br>Tixati: <a href="https://www.tixati.com/">https://www.tixati.com</a><br>Transmissionbt: <a href="https://transmissionbt.com/">https://transmissionbt.com</a></p><h5 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h5><p>tTorrent: <a href="https://play.google.com/store/search?q=tTorrent+Lite">https://play.google.com/store/search?q=tTorrent+Lite</a></p><p>μTorrent: <a href="https://play.google.com/store/apps/details?id=com.utorrent.client">https://play.google.com/store/apps/details?id=com.utorrent.client</a></p><p>TorrDroid: <a href="https://play.google.com/store/apps/details?id=intelligems.torrdroid">https://play.google.com/store/apps/details?id=intelligems.torrdroid</a></p><p>WeTorrent: <a href="https://play.google.com/store/apps/details?id=co.we.torrent">https://play.google.com/store/apps/details?id=co.we.torrent</a></p><p>Transmission: <a href="https://play.google.com/store/apps/details?id=com.ap.transmission.btc">https://play.google.com/store/apps/details?id=com.ap.transmission.btc</a></p><h5 id="资源站"><a href="#资源站" class="headerlink" title="资源站"></a>资源站</h5><p>LimeTorrents： <a href="https://www.limetorrents.info/">https://www.limetorrents.info</a><br>TorrentDownloads：<a href="https://torrentdownloads.mrunblock.pro/">https://torrentdownloads.mrunblock.pro</a><br>Zooqle：<a href="https://zooqle.com/">https://zooqle.com</a><br>EZTV：<a href="https://eztv.io/">https://eztv.io</a><br>YTS ：<a href="https://yts.mx/">https://yts.mx</a><br>Torrentz2：<a href="https://torrentz2eu.in/">https://torrentz2eu.in</a><br>Torlock：<a href="https://www.torlock.com/">https://www.torlock.com</a><br>1337x：<a href="https://1337x.to/">https://1337x.to</a><br>RARBG：<a href="https://rarbg.to/">https://rarbg.to</a><br>海盗湾：<a href="https://thepiratebay10.org/">https://thepiratebay10.org</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实用免费软件&quot;&gt;&lt;a href=&quot;#实用免费软件&quot; class=&quot;headerlink&quot; title=&quot;实用免费软件&quot;&gt;&lt;/a&gt;实用免费软件&lt;/h3&gt;&lt;h4 id=&quot;markdown编辑器&quot;&gt;&lt;a href=&quot;#markdown编辑器&quot; class=&quot;header</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="资源" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="tool" scheme="https://guobq.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>实用chrome插件</title>
    <link href="https://guobq.github.io/bq/9e37145e.html"/>
    <id>https://guobq.github.io/bq/9e37145e.html</id>
    <published>2021-04-06T16:00:00.000Z</published>
    <updated>2021-04-12T08:17:46.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实用chrome插件"><a href="#实用chrome插件" class="headerlink" title="实用chrome插件"></a>实用chrome插件</h3><h4 id="油猴"><a href="#油猴" class="headerlink" title="油猴"></a>油猴</h4><p>Tampermonkey<br><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo</a></p><h4 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h4><p>SimpleExtManager<br><a href="https://chrome.google.com/webstore/detail/simpleextmanager/kniehgiejgnnpgojkdhhjbgbllnfkfdk">https://chrome.google.com/webstore/detail/simpleextmanager/kniehgiejgnnpgojkdhhjbgbllnfkfdk</a></p><h4 id="谷歌历史记录优化"><a href="#谷歌历史记录优化" class="headerlink" title="谷歌历史记录优化"></a>谷歌历史记录优化</h4><p>Chrome Better History<br><a href="https://chrome.google.com/webstore/detail/view-chrome-history/oiginoblioefjckppeefcofmkkhgbdfc/related?hl=zh-CN">https://chrome.google.com/webstore/detail/view-chrome-history/oiginoblioefjckppeefcofmkkhgbdfc/related?hl=zh-CN</a></p><h4 id="听歌识曲"><a href="#听歌识曲" class="headerlink" title="听歌识曲"></a>听歌识曲</h4><p>AHA MUSIC<br><a href="https://chrome.google.com/webstore/detail/aha-music-song-finder-for/dpacanjfikmhoddligfbehkpomnbgblf?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/aha-music-song-finder-for/dpacanjfikmhoddligfbehkpomnbgblf?utm_source=chrome-ntp-icon</a></p><h4 id="网页截图"><a href="#网页截图" class="headerlink" title="网页截图"></a>网页截图</h4><p>Awesome screenshot<br><a href="https://chrome.google.com/webstore/detail/screenshot-screen-video-r/jgmmgiojkjopgnanopiamhbhnpaednfg?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/screenshot-screen-video-r/jgmmgiojkjopgnanopiamhbhnpaednfg?utm_source=chrome-ntp-icon</a></p><h4 id="标签冻结"><a href="#标签冻结" class="headerlink" title="标签冻结"></a>标签冻结</h4><p>the-great-suspender<br><a href="https://chrome.google.com/webstore/detail/the-great-suspender-origi/ahmkjjgdligadogjedmnogbpbcpofeeo?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/the-great-suspender-origi/ahmkjjgdligadogjedmnogbpbcpofeeo?utm_source=chrome-ntp-icon</a></p><h4 id="图片反向搜索"><a href="#图片反向搜索" class="headerlink" title="图片反向搜索"></a>图片反向搜索</h4><p>Tineye<br><a href="https://chrome.google.com/webstore/detail/tineye-reverse-image-sear/haebnnbpedcbhciplfhjjkbafijpncjl?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/tineye-reverse-image-sear/haebnnbpedcbhciplfhjjkbafijpncjl?utm_source=chrome-ntp-icon</a></p><h4 id="图片助手"><a href="#图片助手" class="headerlink" title="图片助手"></a>图片助手</h4><p>ImageAssistant</p><p><a href="https://chrome.google.com/webstore/detail/imageassistant-batch-imag/dbjbempljhcmhlfpfacalomonjpalpko">https://chrome.google.com/webstore/detail/imageassistant-batch-imag/dbjbempljhcmhlfpfacalomonjpalpko</a></p><h4 id="网站可信度评级"><a href="#网站可信度评级" class="headerlink" title="网站可信度评级"></a>网站可信度评级</h4><p>Web of Trust<br><a href="https://chrome.google.com/webstore/detail/wot-web-of-trust-website/bhmmomiinigofkjcapegjjndpbikblnp?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/wot-web-of-trust-website/bhmmomiinigofkjcapegjjndpbikblnp?utm_source=chrome-ntp-icon</a></p><h4 id="护眼插件"><a href="#护眼插件" class="headerlink" title="护眼插件"></a>护眼插件</h4><p>Dark-reader<br><a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-ntp-icon</a></p><h4 id="颜色提取"><a href="#颜色提取" class="headerlink" title="颜色提取"></a>颜色提取</h4><p>ColorPick Eyedropper<br><a href="https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg?utm_source=chrome-ntp-icon</a></p><h4 id="清爽阅读"><a href="#清爽阅读" class="headerlink" title="清爽阅读"></a>清爽阅读</h4><p>Just read<br><a href="https://chrome.google.com/webstore/detail/just-read/dgmanlpmmkibanfdgjocnabmcaclkmod?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/just-read/dgmanlpmmkibanfdgjocnabmcaclkmod?utm_source=chrome-ntp-icon</a></p><h4 id="邮件加密"><a href="#邮件加密" class="headerlink" title="邮件加密"></a>邮件加密</h4><p>Flowcrypt<br><a href="https://chrome.google.com/webstore/detail/flowcrypt-encrypt-gmail-w/bnjglocicdkmhmoohhfkfkbbkejdhdgc?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/flowcrypt-encrypt-gmail-w/bnjglocicdkmhmoohhfkfkbbkejdhdgc?utm_source=chrome-ntp-icon</a></p><h4 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h4><p>QUICK QR<br><a href="https://chrome.google.com/webstore/detail/qr-code-generator/afpbjjgbdimpioenaedcjgkaigggcdpp?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/qr-code-generator/afpbjjgbdimpioenaedcjgkaigggcdpp?utm_source=chrome-ntp-icon</a></p><h4 id="ie浏览器支持"><a href="#ie浏览器支持" class="headerlink" title="ie浏览器支持"></a>ie浏览器支持</h4><p>IE Tab<br><a href="https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd?utm_source=chrome-ntp-icon</a></p><h4 id="网络测速"><a href="#网络测速" class="headerlink" title="网络测速"></a>网络测速</h4><p>Speedtest<br><a href="https://chrome.google.com/webstore/detail/speedtest-by-ookla/pgjjikdiikihdfpoppgaidccahalehjh?hl=zh-CN">https://chrome.google.com/webstore/detail/speedtest-by-ookla/pgjjikdiikihdfpoppgaidccahalehjh?hl=zh-CN</a></p><h4 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h4><p>Astar VPN<br><a href="https://chrome.google.com/webstore/detail/astar-vpn-free-and-fast-v/jajilbjjinjmgcibalaakngmkilboobh?hl=zh-CN">https://chrome.google.com/webstore/detail/astar-vpn-free-and-fast-v/jajilbjjinjmgcibalaakngmkilboobh?hl=zh-CN</a></p><h4 id="图片悬浮"><a href="#图片悬浮" class="headerlink" title="图片悬浮"></a>图片悬浮</h4><p>Imagus<br><a href="https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?hl=zh-CN">https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?hl=zh-CN</a></p><h4 id="截幕-amp-屏幕录像机"><a href="#截幕-amp-屏幕录像机" class="headerlink" title="截幕 &amp; 屏幕录像机"></a>截幕 &amp; 屏幕录像机</h4><p>Nimbus<br><a href="https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj?hl=zh-CN">https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj?hl=zh-CN</a></p><h4 id="右键锁"><a href="#右键锁" class="headerlink" title="右键锁"></a>右键锁</h4><p>SuperCopy<br><a href="https://chrome.google.com/webstore/detail/supercopy-allow-right-cli/onepmapfbjohnegdmfhndpefjkppbjkm?hl=zh-CN">https://chrome.google.com/webstore/detail/supercopy-allow-right-cli/onepmapfbjohnegdmfhndpefjkppbjkm?hl=zh-CN</a></p><h4 id="Google翻译"><a href="#Google翻译" class="headerlink" title="Google翻译"></a>Google翻译</h4><p><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=zh-CN">https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=zh-CN</a></p><h4 id="Office编辑"><a href="#Office编辑" class="headerlink" title="Office编辑"></a>Office编辑</h4><p>Google文档、表格及幻灯片的Office编辑扩展程序<br><a href="https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?hl=zh-CN">https://chrome.google.com/webstore/detail/office-editing-for-docs-s/gbkeegbaiigmenfmjfclcdgdpimamgkj?hl=zh-CN</a></p><h4 id="亚马逊商品历史价格"><a href="#亚马逊商品历史价格" class="headerlink" title="亚马逊商品历史价格"></a>亚马逊商品历史价格</h4><p>Chrome Amazon Assistant<br><a href="https://chrome.google.com/webstore/detail/amazon-assistant-for-chro/pbjikboenpfhbbejgkoklgkhjpfogcam?hl=zh-CN">https://chrome.google.com/webstore/detail/amazon-assistant-for-chro/pbjikboenpfhbbejgkoklgkhjpfogcam?hl=zh-CN</a></p><h4 id="间隔弹出式通知"><a href="#间隔弹出式通知" class="headerlink" title="间隔弹出式通知"></a>间隔弹出式通知</h4><p>PostureMinder<br><a href="https://chrome.google.com/webstore/detail/postureminder/dkmkfopiihabelocpelofchappjjnpkm?hl=en">https://chrome.google.com/webstore/detail/postureminder/dkmkfopiihabelocpelofchappjjnpkm?hl=en</a></p><h4 id="PDF与网站通用萤光标示工具"><a href="#PDF与网站通用萤光标示工具" class="headerlink" title="PDF与网站通用萤光标示工具"></a>PDF与网站通用萤光标示工具</h4><p>Weava highlighter<br><a href="https://chrome.google.com/webstore/detail/weava-highlighter-pdf-web/cbnaodkpfinfiipjblikofhlhlcickei?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/weava-highlighter-pdf-web/cbnaodkpfinfiipjblikofhlhlcickei?utm_source=chrome-ntp-icon</a></p><h4 id="pdf在线编辑"><a href="#pdf在线编辑" class="headerlink" title="pdf在线编辑"></a>pdf在线编辑</h4><p>pdf2go<br><a href="https://chrome.google.com/webstore/detail/online-pdf-editor-pdf2goc/dfnhijmficoiilogkjlnkionfjlgecdi?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/online-pdf-editor-pdf2goc/dfnhijmficoiilogkjlnkionfjlgecdi?utm_source=chrome-ntp-icon</a></p><h4 id="事项标签页"><a href="#事项标签页" class="headerlink" title="事项标签页"></a>事项标签页</h4><p>momentum<br><a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=en">https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=en</a></p><h4 id="Serach-by-image"><a href="#Serach-by-image" class="headerlink" title="Serach by image"></a>Serach by image</h4><p><a href="https://chrome.google.com/webstore/detail/search-by-image/cnojnbdhbhnkbcieeekonklommdnndci?hl=en">https://chrome.google.com/webstore/detail/search-by-image/cnojnbdhbhnkbcieeekonklommdnndci?hl=en</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实用chrome插件&quot;&gt;&lt;a href=&quot;#实用chrome插件&quot; class=&quot;headerlink&quot; title=&quot;实用chrome插件&quot;&gt;&lt;/a&gt;实用chrome插件&lt;/h3&gt;&lt;h4 id=&quot;油猴&quot;&gt;&lt;a href=&quot;#油猴&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="资源" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="tool" scheme="https://guobq.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>python airtest</title>
    <link href="https://guobq.github.io/bq/fec61df9.html"/>
    <id>https://guobq.github.io/bq/fec61df9.html</id>
    <published>2021-03-12T06:46:45.039Z</published>
    <updated>2021-04-11T14:48:25.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-airtest"><a href="#python-airtest" class="headerlink" title="python airtest"></a>python airtest</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U airtest</span><br></pre></td></tr></table></figure><p>问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collecting opencv-contrib-python</span><br><span class="line">  Downloading opencv_contrib_python-4.5.1.48-cp37-cp37m-win_amd64.whl (41.2 MB)</span><br><span class="line">     |                                | 40 kB 2.4 kB/s eta 4:45:17ERROR: Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;c:\python37\lib\site-packages\pip\_vendor\resolvelib\resolvers.py&quot;, line 171, in _merge_into_criterion</span><br><span class="line">    crit = self.state.criteria[name]</span><br><span class="line">KeyError: &#x27;opencv-contrib-python&#x27;</span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Consider using the --user option or check the permissions.</span></span><br><span class="line">pip install --user -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-contrib-python</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python-airtest&quot;&gt;&lt;a href=&quot;#python-airtest&quot; class=&quot;headerlink&quot; title=&quot;python airtest&quot;&gt;&lt;/a&gt;python airtest&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot;</summary>
      
    
    
    
    <category term="Test" scheme="https://guobq.github.io/categories/Test/"/>
    
    <category term="automation" scheme="https://guobq.github.io/categories/Test/automation/"/>
    
    
    <category term="python" scheme="https://guobq.github.io/tags/python/"/>
    
    <category term="airtest" scheme="https://guobq.github.io/tags/airtest/"/>
    
  </entry>
  
  <entry>
    <title>docker NFS共享目录实现</title>
    <link href="https://guobq.github.io/bq/cfe9e417.html"/>
    <id>https://guobq.github.io/bq/cfe9e417.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-06-03T13:46:51.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker-NFS共享目录实现"><a href="#docker-NFS共享目录实现" class="headerlink" title="docker NFS共享目录实现"></a>docker NFS共享目录实现</h3><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装 rpcbind 和 nfs-utils</span></span><br><span class="line">yum install nfs-utils rpcbind</span><br><span class="line"><span class="meta">#</span><span class="bash">Ubuntu中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务端</span></span><br><span class="line">apt install nfs-kernel-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端</span></span><br><span class="line">apt install nfs-common</span><br><span class="line"><span class="meta">#</span><span class="bash">在服务端创建一个共享目录 /home/shared ，作为客户端挂载的远端入口，然后设置权限。</span></span><br><span class="line">mkdir -p /home/shared</span><br><span class="line">chmod 777 /home/shared</span><br><span class="line"><span class="meta">#</span><span class="bash">修改 NFS 配置文件</span></span><br><span class="line">vi /etc/exports</span><br><span class="line">/home/shared *(rw,sync,insecure,no_subtree_check,no_root_squash)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动rpc服务</span></span><br><span class="line">service rpcbind start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 NFS 服务</span></span><br><span class="line">service nfs-server start</span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否正确加载了设置的 /etc/exports 配置</span></span><br><span class="line">showmount -e localhost</span><br><span class="line"><span class="meta">#</span><span class="bash"> 端口配置或关闭防火墙systemctl stop firewalld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nfs启动时会随机启动多个端口并向RPC注册,配置NFS固定端口</span></span><br><span class="line">vi /etc/sysconfig/nfs</span><br><span class="line">RQUOTAD_PORT=30001</span><br><span class="line">LOCKD_TCPPORT=30002</span><br><span class="line">LOCKD_UDPPORT=30002</span><br><span class="line">MOUNTD_PORT=30003</span><br><span class="line">STATD_PORT=30004</span><br><span class="line"><span class="meta">#</span><span class="bash"> 端口开放</span></span><br><span class="line">TCP&amp;UDP 111,2049,30001-30004</span><br></pre></td></tr></table></figure><p> /home/shared 文件目录设置为 <code>*</code> 即允许所有客户端挂载,可以设置 IP 区间，例如：<code>/home 10.222.77.0/24(ro,sync,insecure,no_root_squash)</code> 设置该ip区间的客户端挂载只读挂载。</p><h4 id="NFS-配置文件参数参考"><a href="#NFS-配置文件参数参考" class="headerlink" title="NFS 配置文件参数参考"></a>NFS 配置文件参数参考</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>ro</code></td><td>只读访问</td></tr><tr><td><code>rw</code></td><td>读写访问</td></tr><tr><td><code>sync</code></td><td>所有数据在请求时写入共享</td></tr><tr><td><code>async</code></td><td>nfs 在写入数据前可以响应请求</td></tr><tr><td><code>secure</code></td><td>nfs 通过 1024 以下的安全 TCP/IP 端口发送</td></tr><tr><td><code>insecure</code></td><td>nfs 通过 1024 以上的端口发送</td></tr><tr><td><code>wdelay</code></td><td>如果多个用户要写入 nfs 目录，则归组写入（默认）</td></tr><tr><td><code>no_wdelay</code></td><td>如果多个用户要写入 nfs 目录，则立即写入，当使用 async 时，无需此设置</td></tr><tr><td><code>hide</code></td><td>在 nfs 共享目录中不共享其子目录</td></tr><tr><td><code>no_hide</code></td><td>共享 nfs 目录的子目录</td></tr><tr><td><code>subtree_check</code></td><td>如果共享 /usr/bin 之类的子目录时，强制 nfs 检查父目录的权限（默认）</td></tr><tr><td><code>no_subtree_check</code></td><td>不检查父目录权限</td></tr><tr><td><code>all_squash</code></td><td>共享文件的 UID 和 GID 映射匿名用户 anonymous，适合公用目录</td></tr><tr><td><code>no_all_squash</code></td><td>保留共享文件的 UID 和 GID（默认）</td></tr><tr><td><code>root_squash</code></td><td>root 用户的所有请求映射成如 anonymous 用户一样的权限（默认）</td></tr><tr><td><code>no_root_squash</code></td><td>root 用户具有根目录的完全管理访问权限</td></tr><tr><td><code>anonuid=xxx</code></td><td>指定 nfs 服务器 /etc/passwd 文件中匿名用户的 UID</td></tr><tr><td><code>anongid=xxx</code></td><td>指定 nfs 服务器 /etc/passwd 文件中匿名用户的 GID</td></tr></tbody></table><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端查看共享目录</span></span><br><span class="line">showmount -e ip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端挂载点</span></span><br><span class="line">mkdir -p /home/shared</span><br><span class="line">chmod 777 /home/shared</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载</span></span><br><span class="line">sudo mount -t nfs 192.168.13.129:/home/shared /home/shared</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">umount /home/shared</span><br></pre></td></tr></table></figure><h4 id="挂载到docker"><a href="#挂载到docker" class="headerlink" title="挂载到docker"></a>挂载到docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true --name jenkins -p 8080:8080 -p 50000:50000 -v /home/shared:/home/shared -v ~/docker/jenkins:/var/jenkins_home jenkins/jenkins</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;docker-NFS共享目录实现&quot;&gt;&lt;a href=&quot;#docker-NFS共享目录实现&quot; class=&quot;headerlink&quot; title=&quot;docker NFS共享目录实现&quot;&gt;&lt;/a&gt;docker NFS共享目录实现&lt;/h3&gt;&lt;h4 id=&quot;服务端配置&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Linux" scheme="https://guobq.github.io/categories/Linux/"/>
    
    <category term="配置" scheme="https://guobq.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="NFS" scheme="https://guobq.github.io/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>WSL2使用</title>
    <link href="https://guobq.github.io/bq/f34d8231.html"/>
    <id>https://guobq.github.io/bq/f34d8231.html</id>
    <published>2021-02-13T16:00:00.000Z</published>
    <updated>2021-08-10T15:54:44.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><p>windows10版本大于20H1</p><p>升级工具链接:<a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a></p><h4 id="启用适用于-Linux-的-Windows-子系统"><a href="#启用适用于-Linux-的-Windows-子系统" class="headerlink" title="启用适用于 Linux 的 Windows 子系统"></a>启用适用于 Linux 的 Windows 子系统</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#管理员</span></span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><h4 id="启用虚拟机功能"><a href="#启用虚拟机功能" class="headerlink" title="启用虚拟机功能"></a>启用虚拟机功能</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管理员</span></span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><h4 id="下载-Linux-内核更新包"><a href="#下载-Linux-内核更新包" class="headerlink" title="下载 Linux 内核更新包"></a>下载 Linux 内核更新包</h4><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p><h4 id="将-WSL-2-设置为默认版本"><a href="#将-WSL-2-设置为默认版本" class="headerlink" title="将 WSL 2 设置为默认版本"></a>将 WSL 2 设置为默认版本</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="安装linux子系统"><a href="#安装linux子系统" class="headerlink" title="安装linux子系统"></a>安装linux子系统</h4><p>Microsoft Store:<a href="https://aka.ms/wslstore">https://aka.ms/wslstore</a></p><h3 id="实现局域网访问"><a href="#实现局域网访问" class="headerlink" title="实现局域网访问"></a>实现局域网访问</h3><h4 id="设置支持root远程登录"><a href="#设置支持root远程登录" class="headerlink" title="设置支持root远程登录"></a>设置支持root远程登录</h4><p>安装ssh服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove openssh-server</span><br><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>Ubuntu设置root密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>修改/root/.profile文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mesg n || true</span></span><br><span class="line"><span class="attr">tty</span> <span class="string">-s &amp;&amp; mesg n || true</span></span><br></pre></td></tr></table></figure><p>编辑配置文件/etc/ssh/sshd_config</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Port</span> <span class="string">22 #默认即可，如果有端口占用可以自己修改</span></span><br><span class="line"><span class="attr">PasswordAuthentication</span> <span class="string">yes # 允许用户名密码方式登录</span></span><br><span class="line"><span class="comment"># PermitRootLogin without-password</span></span><br><span class="line"><span class="attr">PermitRootLogin</span> <span class="string">yes # 允许root用户登录</span></span><br></pre></td></tr></table></figure><p>重启ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h4 id="给-WSL2-设置静态-IP-地址"><a href="#给-WSL2-设置静态-IP-地址" class="headerlink" title="给 WSL2 设置静态 IP 地址"></a>给 WSL2 设置静态 IP 地址</h4><p>WSL2 会在启动时做网络适配器的配置，我们需要在启动后重新为其配置网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 WSL2 的网关设置为 192.168.50.1，并为 WSL2 分配 192.168.50.2 的 IP 地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除掉 WSL2 已经配置的 IP 地址，然后为其分配 192.168.50.2/24，最后配置路由并指定 DNS Server</span></span><br><span class="line">sudo ip addr del $(ip addr show eth0 | grep &#x27;inet\b&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | head -n 1) dev eth0</span><br><span class="line">sudo ip addr add 192.168.50.2/24 broadcast 192.168.50.255 dev eth0</span><br><span class="line">sudo ip route add 0.0.0.0/0 via 192.168.50.1 dev eth0</span><br><span class="line">sudo echo nameserver 192.168.50.1 &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>对 WSL2 使用的 Internal Virtual Switch 进行配置,PowerShell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到 vEthernet (WSL) 这个网络适配器，然后将其所有已有的 IP 地址删除，为其添加 192.168.50.1/24 的 IP 地址,最后设置 NAT：首先删除名字叫做 WSLNat 的 NAT（因为我们后续创建的 NAT 名字叫做 WSLNat，这些命令每次启动系统后都需要执行，因此可能系统中已经存在名为 WSLNat 的 NAT 了，为了防止冲突，如果存在的话就先删掉） ，然后创建一个名字叫做 WSLNat 的 NAT，设置内部地址为 192.168.50.0/24</span></span><br><span class="line"><span class="built_in">Get-NetAdapter</span> <span class="string">&#x27;vEthernet (WSL)&#x27;</span> | <span class="built_in">Get-NetIPAddress</span> | <span class="built_in">Remove-NetIPAddress</span> <span class="literal">-Confirm</span>:<span class="variable">$False</span></span><br><span class="line"><span class="built_in">New-NetIPAddress</span> <span class="literal">-IPAddress</span> <span class="number">192.168</span>.<span class="number">50.1</span> <span class="literal">-PrefixLength</span> <span class="number">24</span> <span class="literal">-InterfaceAlias</span> <span class="string">&#x27;vEthernet (WSL)&#x27;</span></span><br><span class="line"><span class="built_in">Get-NetNat</span> | ? Name <span class="operator">-Eq</span> WSLNat | <span class="built_in">Remove-NetNat</span> <span class="literal">-Confirm</span>:<span class="variable">$False</span></span><br><span class="line"><span class="built_in">New-NetNat</span> <span class="literal">-Name</span> WSLNat <span class="literal">-InternalIPInterfaceAddressPrefix</span> <span class="number">192.168</span>.<span class="number">50.0</span>/<span class="number">24</span>;</span><br></pre></td></tr></table></figure><h4 id="一键配置"><a href="#一键配置" class="headerlink" title="一键配置"></a>一键配置</h4><p>管理员运行.bat或.cmd</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wsl -d Ubuntu-<span class="number">20</span>.<span class="number">04</span> -u root ip addr <span class="built_in">del</span> $(ip addr show eth0 ^| grep &#x27;inet\b&#x27; ^| awk &#x27;&#123;<span class="built_in">print</span> $<span class="number">2</span>&#125;&#x27; ^| head -n <span class="number">1</span>) dev eth0</span><br><span class="line">wsl -d Ubuntu-<span class="number">20</span>.<span class="number">04</span> -u root ip addr add <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">2</span>/<span class="number">24</span> broadcast <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">255</span> dev eth0</span><br><span class="line">wsl -d Ubuntu-<span class="number">20</span>.<span class="number">04</span> -u root ip route add <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">0</span> via <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">1</span> dev eth0</span><br><span class="line">wsl -d Ubuntu-<span class="number">20</span>.<span class="number">04</span> -u root <span class="built_in">echo</span> nameserver <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">1</span> ^&gt; /etc/resolv.conf</span><br><span class="line">powershell -c &quot;Get-NetAdapter &#x27;vEthernet (WSL)&#x27; | Get-NetIPAddress | Remove-NetIPAddress -Confirm:$False; New-NetIPAddress -IPAddress <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">1</span> -PrefixLength <span class="number">24</span> -InterfaceAlias &#x27;vEthernet (WSL)&#x27;; Get-NetNat | ? Name -Eq WSLNat | Remove-NetNat -Confirm:$False; New-NetNat -Name WSLNat -InternalIPInterfaceAddressPrefix <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">0</span>/<span class="number">24</span>;&quot;</span><br><span class="line">wsl sudo service ssh restart</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="开启SSHD服务失败"><a href="#开启SSHD服务失败" class="headerlink" title="开启SSHD服务失败"></a>开启SSHD服务失败</h4><p>现象<br>sshd: no hostkeys available — exiting<br>解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key</span><br><span class="line">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果上述两个文件存在，仍然出现这个错误，那么chmod 600 上述两个文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;配置安装&quot;&gt;&lt;a href=&quot;#配置安装&quot; class=&quot;headerlink&quot; title=&quot;配置安装&quot;&gt;&lt;/a&gt;配置安装&lt;/h3&gt;&lt;h4 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="工具与配置" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E5%B7%A5%E5%85%B7%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Linux" scheme="https://guobq.github.io/tags/Linux/"/>
    
    <category term="windows" scheme="https://guobq.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>vscode</title>
    <link href="https://guobq.github.io/bq/849a3ae4.html"/>
    <id>https://guobq.github.io/bq/849a3ae4.html</id>
    <published>2021-02-04T16:00:00.000Z</published>
    <updated>2021-06-03T14:40:33.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="romote-ssh配置"><a href="#romote-ssh配置" class="headerlink" title="romote ssh配置"></a>romote ssh配置</h3><p>在json配置文件中配置远程平台系统类型</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;remote.SSH.remotePlatform&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;AWS&quot;</span>: <span class="string">&quot;linux&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>将公钥文件id_rsa.pub传到远程服务器的authorized_keys文件中,在.ssh/config里配置密钥信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host AWS</span><br><span class="line">    HostName 52.221.237.133</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile C:\Users\22782\.ssh\id_rsa</span><br></pre></td></tr></table></figure><h3 id="通过跳板机连接服务器"><a href="#通过跳板机连接服务器" class="headerlink" title="通过跳板机连接服务器"></a>通过跳板机连接服务器</h3><p>有时候我们需要跳板机来连接服务器，也即先连接一台跳板机服务器，然后通过这台跳板机所在的内网再次跳转到目标服务器。最简单的做法就是按上述方法连接到跳板机，然后在跳板机的终端用<code>ssh</code>指令跳转到目标服务器，但这样跳转后，我们无法在VScode中打开服务器的文件目录，操作起来很不方便。我们可以把config的设置改成如下，就可以通过c00跳板机跳转到c01了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host c00</span><br><span class="line">    HostName xxx.xxx.xxx.xxx（跳板机IP）</span><br><span class="line">    User lyfeng</span><br><span class="line"></span><br><span class="line">Host c01</span><br><span class="line">    HostName 192.168.0.10（内网地址）</span><br><span class="line">    User lyfeng</span><br><span class="line">    ProxyCommand <span class="string">&quot;openssh的安装路径&quot;</span>\ssh.exe -W %h:%p -q c00</span><br><span class="line">    <span class="comment"># 连接c00, 再通过c00的局域网ssh到c01</span></span><br></pre></td></tr></table></figure><p>openssh的安装路径因人而异（C:\Windows\System32\OpenSSH\ssh.exe）</p><h3 id="SFTP配置"><a href="#SFTP配置" class="headerlink" title="SFTP配置"></a>SFTP配置</h3><p>sftp.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;sftp&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: xxx,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;remotePath&quot;</span>: <span class="string">&quot;/home/jenkins/sftp&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;E:\\Downloads\\sftp&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uploadOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;passive&quot;</span>: <span class="literal">false</span> ,</span><br><span class="line">    <span class="attr">&quot;interactiveAuth&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;syncMode&quot;</span>: <span class="string">&quot;update&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;**/.vscode/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;**/.git/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;**/.DS.Store&quot;</span>,</span><br><span class="line">        <span class="string">&quot;**/dataset/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.weights&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.pt&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;watcher&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;files&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;autoupload&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;autoDelete&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="函数定义查看"><a href="#函数定义查看" class="headerlink" title="函数定义查看"></a>函数定义查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跳转:</span><br><span class="line">Ctrl + 鼠标左击</span><br><span class="line">返回:</span><br><span class="line">Windows: Alt + ← ;或者 鼠标侧键</span><br><span class="line">Linux: Ctrl + Alt + - ;</span><br><span class="line">Mac: Ctrl + -</span><br></pre></td></tr></table></figure><h4 id="左右括号之间跳转"><a href="#左右括号之间跳转" class="headerlink" title="左右括号之间跳转"></a>左右括号之间跳转</h4><p>ctrl + shift + \</p><h3 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h3><h5 id="无法在这个大型工作区中监视文件更改"><a href="#无法在这个大型工作区中监视文件更改" class="headerlink" title="无法在这个大型工作区中监视文件更改"></a>无法在这个大型工作区中监视文件更改</h5><p>原因：工作区很大并且文件很多，导致VS Code文件观察程序的句柄达到上限。</p><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、使用以下命令查看当前限制：</span></span><br><span class="line">cat /proc/sys/fs/inotify/max_user_watches</span><br><span class="line"><span class="meta">#</span><span class="bash">2、编辑/etc/sysctl.conf</span></span><br><span class="line">sudo vim /etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">3、将以下一行添加到文件末尾，可以将限制增加到最大值</span></span><br><span class="line">fs.inotify.max_user_watches=524288</span><br><span class="line"><span class="meta">#</span><span class="bash">4、保存即可</span></span><br><span class="line">sudo sysctl -p</span><br><span class="line"><span class="meta">#</span><span class="bash">524,288是可以观看的最大文件数，每个文件监视占用540字节（32位）或1kB（64位），假设所有524,288个句柄都被消耗，上限约为256MB（32位）或512MB（64位）</span></span><br></pre></td></tr></table></figure><h5 id="wsl，Ubuntu，E-Could-not-read-response-to-hello-message-from-hook-f-usr-bin-snap-usr"><a href="#wsl，Ubuntu，E-Could-not-read-response-to-hello-message-from-hook-f-usr-bin-snap-usr" class="headerlink" title="wsl，Ubuntu，E: Could not read response to hello message from hook [ ! -f /usr/bin/snap ] || /usr/"></a>wsl，Ubuntu，E: Could not read response to hello message from hook [ ! -f /usr/bin/snap ] || /usr/</h5><p>解决:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /etc/apt/apt.conf.d/20snapd.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;romote-ssh配置&quot;&gt;&lt;a href=&quot;#romote-ssh配置&quot; class=&quot;headerlink&quot; title=&quot;romote ssh配置&quot;&gt;&lt;/a&gt;romote ssh配置&lt;/h3&gt;&lt;p&gt;在json配置文件中配置远程平台系统类型&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="工具与配置" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E5%B7%A5%E5%85%B7%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="vscode" scheme="https://guobq.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>实用工具</title>
    <link href="https://guobq.github.io/bq/93c14ecb.html"/>
    <id>https://guobq.github.io/bq/93c14ecb.html</id>
    <published>2021-02-03T16:00:00.000Z</published>
    <updated>2021-06-03T14:28:14.382Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Jetbrains系列产品reset"><a href="#Jetbrains系列产品reset" class="headerlink" title="Jetbrains系列产品reset"></a>Jetbrains系列产品reset</h4><p><a href="https://zhile.io/2020/11/18/jetbrains-eval-reset.html">https://zhile.io/2020/11/18/jetbrains-eval-reset.html</a></p><h4 id="postman使用"><a href="#postman使用" class="headerlink" title="postman使用"></a>postman使用</h4><p><a href="https://huajiakeji.com/utilities/2018-06/1461.html">https://huajiakeji.com/utilities/2018-06/1461.html</a></p><h4 id="Typora-使用"><a href="#Typora-使用" class="headerlink" title="Typora 使用"></a>Typora 使用</h4><p><a href="https://sspai.com/post/54912">https://sspai.com/post/54912</a></p><h4 id="winSCP密钥登录问题"><a href="#winSCP密钥登录问题" class="headerlink" title="winSCP密钥登录问题"></a>winSCP密钥登录问题</h4><p>Winscp使用的是putty作为SSH登录工具，而puttygen所生成的是以.ppk结尾的密钥文件，所以你使用xshell生成的密钥会提示添加失败，此时你有两种选择，</p><p>1、使用putty重新生成putty格式的密钥，并添加到服务器上。</p><p>2、将openssh格式的私钥转换成winscp支持的.ppk格式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Jetbrains系列产品reset&quot;&gt;&lt;a href=&quot;#Jetbrains系列产品reset&quot; class=&quot;headerlink&quot; title=&quot;Jetbrains系列产品reset&quot;&gt;&lt;/a&gt;Jetbrains系列产品reset&lt;/h4&gt;&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="资源" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="tool" scheme="https://guobq.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>csv与json</title>
    <link href="https://guobq.github.io/bq/3fa857b4.html"/>
    <id>https://guobq.github.io/bq/3fa857b4.html</id>
    <published>2020-12-22T16:00:00.000Z</published>
    <updated>2021-04-11T14:36:14.191Z</updated>
    
    <content type="html"><![CDATA[<p>CSV的换行符号要使用CRLF既” 回车符+换行符”的形式.<br>文字可以使用双引号围起来, 逗号可以围在双引号里面<br>每个单引号要换成””(两个单引号)且字段要用一对单引号围住</p><p>csv里的json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;Content-Type&quot;</span><span class="string">&quot;: &quot;</span><span class="string">&quot;application/json&quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;apiCode&quot;</span><span class="string">&quot;: &quot;</span><span class="string">&quot;INTF_BC_outsvc_write_refreshAuthorize&quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;apiVersion&quot;</span><span class="string">&quot;: &quot;</span><span class="string">&quot;1.0.0&quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;appCode&quot;</span><span class="string">&quot;: &quot;</span><span class="string">&quot;app_jscn_wf_7310&quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;charset&quot;</span><span class="string">&quot;: &quot;</span><span class="string">&quot;utf-8&quot;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;format&quot;</span><span class="string">&quot;: &quot;</span><span class="string">&quot;http+json&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CSV的换行符号要使用CRLF既” 回车符+换行符”的形式.&lt;br&gt;文字可以使用双引号围起来, 逗号可以围在双引号里面&lt;br&gt;每个单引号要换成””(两个单引号)且字段要用一对单引号围住&lt;/p&gt;
&lt;p&gt;csv里的json&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="Test" scheme="https://guobq.github.io/categories/Test/"/>
    
    <category term="automation" scheme="https://guobq.github.io/categories/Test/automation/"/>
    
    
    <category term="参数化" scheme="https://guobq.github.io/tags/%E5%8F%82%E6%95%B0%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>效能与质量</title>
    <link href="https://guobq.github.io/bq/3b90fe4c.html"/>
    <id>https://guobq.github.io/bq/3b90fe4c.html</id>
    <published>2020-10-19T16:00:00.000Z</published>
    <updated>2021-04-11T15:02:32.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效能与质量"><a href="#效能与质量" class="headerlink" title="效能与质量"></a>效能与质量</h2><h3 id="研发阶段和效率价值金字塔"><a href="#研发阶段和效率价值金字塔" class="headerlink" title="研发阶段和效率价值金字塔"></a>研发阶段和效率价值金字塔</h3><blockquote><p>需求调研和评审&gt;技术方案设计和评审&gt;研发&gt;测试</p></blockquote><h2 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h2><h4 id="考核千行代码Bug率的问题"><a href="#考核千行代码Bug率的问题" class="headerlink" title="考核千行代码Bug率的问题"></a>考核千行代码Bug率的问题</h4><blockquote><p>代码行数&lt;&gt;价值</p></blockquote><p>考核标准：Bug率数值越小就说明越好-&gt;尽量增大代码行数</p><p>考核阶段：Bug率的数据主要产出在研发阶段的后期，及提交测试后产出bug数-&gt;从项目的研发阶段和效率价值金字塔来看，其对项目的整体质量方面更多的聚焦在微观层面问题，整体的质量的影响范围会较小。</p><h4 id="更合理的度量质量"><a href="#更合理的度量质量" class="headerlink" title="更合理的度量质量"></a>更合理的度量质量</h4><ol><li><p>需求的评审</p></li><li><p>架构设计方案评审</p></li><li><p>代码模块设计，包的依赖的规划，接口的设计的review</p></li><li><p>代码的review的机制</p></li><li><p>测试用例评审</p></li><li><p>使用代码检测工具，自动发现问题</p></li></ol><blockquote><p>过程评审是最有效也是成本最低的质量和效率保证和提升的手段。另外，过程评审还是迅速提高新人能力及其成果物的规范性的一个有效手段。</p></blockquote><h5 id="系统质量是要靠上游工程做出来的"><a href="#系统质量是要靠上游工程做出来的" class="headerlink" title="系统质量是要靠上游工程做出来的"></a>系统质量是要靠上游工程做出来的</h5><p>上游的工作质量会更为重要，上游的问题的影响范围将更广，对效率和价值的影响更大，应该是我们重点关注的地方。仅仅依赖下游工程(种种测试)来把质量关，是十分低效，而且代价是非常昂贵的。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h3 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h3><blockquote><p>1.需求要被管理，被管理的意思又有两层：一是需求要被确认，二是要控制需求变更</p><p>2.需求要用来指导下游的工作产品，如：计划、设计、测试等</p></blockquote><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><blockquote><p>1.因为项目进度赶等原因，在很多需求还没有明确情况下，便开始开发的工作。<br>2.开始客户只能提出模糊的需求，客户喜欢先让你做个东西给他看，然后他才可能逐渐提出真正的需求，而需求调研人员，对此没有什么好的处理办法。<br>3.客户以种种原因不签需求，项目组在不签需求的情况下，便开始开发工作。<br>4.客户不承认之前提出来的需求，项目组又不能得失客户，项目成员苦不堪言。<br>5.需求经常变化，无法控制。<br>6.设计、代码与需求不对应，特别是需求变更时，不知道应该修改哪部分，也不知道会有哪些影响</p></blockquote><h4 id="优秀的需求管理要素："><a href="#优秀的需求管理要素：" class="headerlink" title="优秀的需求管理要素："></a>优秀的需求管理要素：</h4><blockquote><p>开发者应该理解需求</p><p>通过客户确认（记录）</p><p>需求变更管理（记录确认，影响清单确认）</p><p>需求双向跟踪维护（纵向：上下游工作产品之间的跟踪关系。横向：需求与需求之间的关系、设计与设计之前的关系、代码与代码之间的关系等）</p><p>需求与下游工作产品差异识别（需求变更时：双向跟踪表影响内容同步修改；编写写或者修改计划、设计、代码、测试计划、测试用例等需求下游工作产品时：要与需求保持一致）</p></blockquote><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p><strong>工具赋能：</strong>需求管理平台&lt;-&gt;aido</p><h3 id="需求开发"><a href="#需求开发" class="headerlink" title="需求开发"></a>需求开发</h3><blockquote><p>用系统的方法获取真正的全面的能实现的需求</p></blockquote><h4 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h4><blockquote><p>没有把握好客户需求，直接进入软件的细节，去讨论要做什么功能，界面要怎样设计去了，而忘记了软件的根本目的是为了解决什么问题。</p></blockquote><p>明确客户需求后，就应该把客户需求转变成产品需求和产品组件需求，客户需求一般都是比较高层次的，而且描述也会比较简单，不能作为日后验收的标准，我们需要对软件的规格进行说明。一般来说，我们写的软件规格说明书都会包含产品需求和产品组件需求的。我们导出产品需求和产品组件需求的时候，要注意产品需求和产品组件需求，必须和客户需求对应起来，通常是多对多的关系。为什么要对应起来？我们要保证，软件的每一个界面，每一个功能都是有用的，都是“源自”客户需求的，这样才能保证我们做的事情都是正确的事情，防止被不相干的事情干扰。</p><p>客户需求</p><blockquote><p>可以理解成客户为什么要做本系统，要解决什么问题，客户对系统有怎样的期望，希望能具备一些怎样的特点，简单的说，就是客户的需要是什么。</p></blockquote><p>产品需求</p><blockquote><p>是能满足客户需求，并对软件产品规格进行了详细描述的需求，软件设计师可以根据产品需求进行设计、编码等工作。</p></blockquote><p>产品组件需求</p><blockquote><p>是对产品需求的进一步细化，产品可能会分割成几个子系统、几个部分，每个子系统每部分要具备怎样的功能、要具备怎样的性能、接口要求等，这些可以认为是产品组件需求。</p></blockquote><p>另外一个角度，需求可以分为功能性需求和非功能性需求两类，功能性需求就是系统具备怎样的功能，能做什么事情，而非功能性需求就是指系统要具备怎样的性能、安全级别等方面的要求。客户需求、产品需求和产品组件需求，都会包含功能需求和非功能需求。</p><h4 id="优秀的需求开发要素："><a href="#优秀的需求开发要素：" class="headerlink" title="优秀的需求开发要素："></a>优秀的需求开发要素：</h4><p>干系人的需要、期望、约束和接口要求被收集并转化为客户需求</p><blockquote><p>让客户能完整无遗漏准确地表达出他的想法：（原型、图示、类比、问卷）系统的目标、范围、解决什么问题、希望系统具备怎样的一些特性，满足一些什么接口要求和约束条件等</p><p>把客户原始的需求信息整理成正式的客户需求：通常会包括对系统目标、范围、解决问题、软件特性、接口要求等有详细的描述。</p></blockquote><p>客户需求是精确和详细的，以用来开发产品需求和产品组件需求</p><blockquote><p>产品和产品组件需求：对软件规格的描述，详细描述软件与用户是怎样交互的，用户需要输入什么，系统输出等都会比较详细描述出来。可做验收标准<br>分配需求给每一个产品组件：所有的需求应该与设计的产品组件对应，保证需求驱动后续的设计工作，同时也保证设计都是为需求服务</p><p>定义接口需求：包括系统与第三方的系统的接口要求，也包括系统本身各组件、各子系统、各部分之间的接口要求</p></blockquote><p>需求被分析和确认，并定义出具体的功能性需求</p><blockquote><p>操作场景与功能定义：描述出具体需求的操作场景、上下文，具体的操作步骤，对功能的详细描述等。通常我们可以通过序列图等来表达这些内容</p><p>分析需求：准确性、全面性、可实现性，平衡约束条件，确保需求符合最终的使用场景要求。通常是通过需求评审</p></blockquote><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><h4 id="常见问题-2"><a href="#常见问题-2" class="headerlink" title="常见问题"></a>常见问题</h4><blockquote><p>1)无设计文档<br>2)有设计文档，但形同虚设<br>3)设计时没有考虑可以重用以前项目或者第三方的代码或组件<br>4)没有用需求来驱动设计<br>5)设计没有考虑多过一个的方案<br>6)没有考虑清楚设计的原则和标准<br>7)设计的弹性不够、架构落后？<br>8)代码与设计脱节？<br>9)到处都是面条式代码</p></blockquote><h4 id="优秀的技术方案要素："><a href="#优秀的技术方案要素：" class="headerlink" title="优秀的技术方案要素："></a>优秀的技术方案要素：</h4><p>从候选方案中选择产品或者产品组件的解决方案</p><blockquote><p>先考虑好我们设计方案的选择标准，并找出可能的候选方案</p><p>对产品的规格进行详细的表述，操作概念、场景、环境、操作模式和操作状态等</p><p>根据选择标准选出最佳方案</p></blockquote><p>开发产品或者产品组件设计</p><blockquote><p>概要设计：建立产品功能和框架，包含产品组成区块、产品组件界定、系统状态与模式、主要的内外部接口和界面设计（功能模块设计、数据库设计包括逻辑设计和物理设计及安全性能设计、模块接口和界面设计）</p><p>详细设计：完整定义产品组件的结构和功能，详细描述实现方法、算法</p><p>建立和维护技术数据包：（需求、设计资料等）为开发者提供开发产品或组件的综合性描述，以及产品架构描述、分配需求、产品组件的描述、产品相关生命周期过程描述、关键产品特性、必需的物理特征和约束、接口需求、用于确保实现需求的验证准则等。</p><p>设计合适的产品组件接口：考虑外部接口和内部接口；与原来系统的关系；</p><p>产品组件开发、购买或者重用评估：技术状况</p></blockquote><p>实施产品组件的设计</p><blockquote><p>编码：适当的标准与准则，走查，单元测试</p><p>用户文档：用户手册、安装手册、管理员手册、在线帮助等</p></blockquote><h3 id="产品集成"><a href="#产品集成" class="headerlink" title="产品集成"></a>产品集成</h3><h4 id="常见问题-3"><a href="#常见问题-3" class="headerlink" title="常见问题"></a>常见问题</h4><blockquote><p>时序</p></blockquote><h4 id="优秀的产品集成要素："><a href="#优秀的产品集成要素：" class="headerlink" title="优秀的产品集成要素："></a>优秀的产品集成要素：</h4><p>完成产品集成的准备工作</p><blockquote><p>建立并维护产品组件的产品集成流程<br>建立并维护产品组件集成与评估标准<br>建立并维护产品组件的确认与交付标准</p></blockquote><p>确保产品内部与外部的接口是兼容的</p><blockquote><p>检查接口描述，保证覆盖性和完整性：通常通过评审接口说明。包括产品组件接口，产品集成所有环境的接口（定期）</p><p>管理产品和产品组件的内部和外部接口的定义、设计及变更：管理各组件之间的关系，保证组件间保持一致（配置库）</p></blockquote><p>组合已集成的产品组件，并交付已集成、已验证、已确认的产品</p><blockquote><p>在产品集成前，确定要集成的产品的产品组件已被确认、并依据其说明执行，并且确定产品集成接口符合接口说明</p><p>根据产品集成顺序和相关过程集成产品组件</p><p>评估产品组件的接口兼容性</p><p>打包组装已集成的产品或组件，并交付给适当的客户</p></blockquote><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p><strong>工具赋能</strong>：统一环境管理，持续集成，持续交付</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;效能与质量&quot;&gt;&lt;a href=&quot;#效能与质量&quot; class=&quot;headerlink&quot; title=&quot;效能与质量&quot;&gt;&lt;/a&gt;效能与质量&lt;/h2&gt;&lt;h3 id=&quot;研发阶段和效率价值金字塔&quot;&gt;&lt;a href=&quot;#研发阶段和效率价值金字塔&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="体系" scheme="https://guobq.github.io/categories/%E4%BD%93%E7%B3%BB/"/>
    
    <category term="过程质量" scheme="https://guobq.github.io/categories/%E4%BD%93%E7%B3%BB/%E8%BF%87%E7%A8%8B%E8%B4%A8%E9%87%8F/"/>
    
    
    <category term="cmmi" scheme="https://guobq.github.io/tags/cmmi/"/>
    
  </entry>
  
  <entry>
    <title>python selenium</title>
    <link href="https://guobq.github.io/bq/67576fd0.html"/>
    <id>https://guobq.github.io/bq/67576fd0.html</id>
    <published>2020-10-17T16:00:00.000Z</published>
    <updated>2021-04-11T14:49:30.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-selenium"><a href="#python-selenium" class="headerlink" title="python selenium"></a>python selenium</h2><h3 id="弹出框处理的实现"><a href="#弹出框处理的实现" class="headerlink" title="弹出框处理的实现"></a>弹出框处理的实现</h3><p>弹出框有两种：页面弹出框（可定位元素能操作）、Windows弹出框（不能直接定位）</p><h4 id="一、页面弹出框"><a href="#一、页面弹出框" class="headerlink" title="一、页面弹出框"></a>一、页面弹出框</h4><p>等待弹出框出现之后，定位弹出框，操作其中元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#点击百度登录按钮</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;u1&quot;]//a[@name=&quot;tj_login&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待百度登录弹出框中 要出现的元素可见</span></span><br><span class="line">ele_id = <span class="string">&quot;TANGRAM__PSP_10__footerULoginBtn&quot;</span></span><br><span class="line">param = (By.ID,ele_id)</span><br><span class="line"><span class="comment">#元素可见时，再进行后续操作</span></span><br><span class="line">WebDriverWait(driver,<span class="number">10</span>).until(EC.visibility_of_element_located(param))</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(ele_id).click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="二、Windows弹出框"><a href="#二、Windows弹出框" class="headerlink" title="二、Windows弹出框"></a><strong>二、Windows弹出框</strong></h4><p>使用 driver.switch_to.alert 切换到Windows弹出框</p><p>Alert类提供了一系列操作方法：</p><ul><li>accept() 确定</li><li>dismiss() 取消</li><li>text() 获取弹出框里面的内容</li><li>send_keys(keysToSend) 输入字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1:定位alert弹出框</span></span><br><span class="line"><span class="comment">#点击页面元素，触发alert弹出框</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;alert&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#等待alert弹出框可见</span></span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).until(EC.alert_is_present())</span><br><span class="line"></span><br><span class="line"><span class="comment">#从html页面切换到alert弹框 </span></span><br><span class="line">alert = driver.switch_to.alert</span><br><span class="line"><span class="comment">#获取alert的文本内容</span></span><br><span class="line">print(alert.text)</span><br><span class="line"><span class="comment">#接受--选择“确定”</span></span><br><span class="line">alert.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment">#2:定位confirm弹出框</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;confirm&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).until(EC.alert_is_present())</span><br><span class="line">alert =driver.switch_to.alert</span><br><span class="line">print(alert.text)</span><br><span class="line"><span class="comment"># 接受--选择“取消”</span></span><br><span class="line">alert.dismiss()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3:定位prompt弹出框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;prompt&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">WebDriverWait(driver,<span class="number">20</span>).until(EC.alert_is_present())</span><br><span class="line">alert =driver.switch_to.alert</span><br><span class="line">alert.send_keys(<span class="string">&quot;jaja&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">print(alert.text)</span><br><span class="line"><span class="comment"># alert.dismiss()</span></span><br><span class="line">alert.accept()</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="input标签-type-file"><a href="#input标签-type-file" class="headerlink" title="input标签(type=file)"></a>input标签(type=file)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;file&#x27;</span>).send_keys(<span class="string">&#x27;./bq.png&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="非input型上传"><a href="#非input型上传" class="headerlink" title="非input型上传"></a>非input型上传</h4><h5 id="autoit"><a href="#autoit" class="headerlink" title="autoit"></a>autoit</h5><p>AutoIt Windows Info 用于识别Windows控件信息<br>Compile Script to.exe 用于将AutoIt生成 exe 执行文件<br>Run Script 用于执行AutoIt脚本<br>SciTE Script Editor 用于编写AutoIt脚本</p><p>1.识别元素，主要是文件名输入框和打开按钮，使用AutoIt Windows Info完成，记录结果如下：<br>文件名输入框的class 为“Edit”，Instance为“1”<br>打开按钮的class 为“Button”，Instance为“1”<br>2.编写脚本，使用SciTE Script Editor，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ControlFocus(&quot;文件上传&quot;, &quot;&quot;,&quot;Edit1&quot;)</span><br><span class="line">WinWait(&quot;[CLASS:#32770]&quot;,&quot;&quot;,10)</span><br><span class="line">ControlSetText(&quot;文件上传&quot;, &quot;&quot;, &quot;Edit1&quot;,&quot;D:bq.jpg&quot;)</span><br><span class="line">Sleep(2000)</span><br><span class="line">ControlClick(&quot;文件上传&quot;, &quot;&quot;,&quot;Button1&quot;);</span><br><span class="line">#注意“文件上传”字样是你点击上传按钮之后弹出的对话框的title</span><br></pre></td></tr></table></figure><p>3、验证脚本<br>保证页面的上传对话框打开，然后运行脚本tools&gt;go<br>4、打开Compile Script to.exe工具，将其生成为exe可执行文件<br>5、python脚本中调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">up=self.driver.find_element(<span class="string">&#x27;class name&#x27;</span>,<span class="string">&#x27;avatar-uploader-trigger&#x27;</span>)</span><br><span class="line">up.find_element(<span class="string">&#x27;class name&#x27;</span>,<span class="string">&#x27;ant-btn&#x27;</span>).click()</span><br><span class="line">os.system(<span class="string">&#x27;D:\python_workspace\QiangSEAuto\upload.exe&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h5 id="win32gui"><a href="#win32gui" class="headerlink" title="win32gui"></a>win32gui</h5><p>示例网址:<a href="http://www.sahitest.com/demo/php/fileUpload.htm">http://www.sahitest.com/demo/php/fileUpload.htm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> win32gui</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">dr = webdriver.Firefox()</span><br><span class="line">dr.get(<span class="string">&#x27;http://sahitest.com/demo/php/fileUpload.htm&#x27;</span>)</span><br><span class="line">upload = dr.find_element_by_id(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">upload.click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># win32gui</span></span><br><span class="line">dialog = win32gui.FindWindow(<span class="string">&#x27;#32770&#x27;</span>, <span class="string">u&#x27;文件上传&#x27;</span>) <span class="comment"># 对话框</span></span><br><span class="line">ComboBoxEx32 = win32gui.FindWindowEx(dialog, <span class="number">0</span>, <span class="string">&#x27;ComboBoxEx32&#x27;</span>, <span class="literal">None</span>) </span><br><span class="line">ComboBox = win32gui.FindWindowEx(ComboBoxEx32, <span class="number">0</span>, <span class="string">&#x27;ComboBox&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">Edit = win32gui.FindWindowEx(ComboBox, <span class="number">0</span>, <span class="string">&#x27;Edit&#x27;</span>, <span class="literal">None</span>) <span class="comment"># 上面三句依次寻找对象，直到找到输入框Edit对象的句柄</span></span><br><span class="line">button = win32gui.FindWindowEx(dialog, <span class="number">0</span>, <span class="string">&#x27;Button&#x27;</span>, <span class="literal">None</span>) <span class="comment"># 确定按钮Button</span></span><br><span class="line"></span><br><span class="line">win32gui.SendMessage(Edit, win32con.WM_SETTEXT, <span class="literal">None</span>, <span class="string">&#x27;d:\\baidu.py&#x27;</span>) <span class="comment"># 往输入框输入绝对地址</span></span><br><span class="line">win32gui.SendMessage(dialog, win32con.WM_COMMAND, <span class="number">1</span>, button) <span class="comment"># 按button</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> upload.get_attribute(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">dr.quit()</span><br></pre></td></tr></table></figure><p>需要windows窗口、消息查看分析器:小工具：Spy++，也可以用autoIT自带的工具</p><p>相关API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">win32gui.FindWindow(lpClassName=<span class="literal">None</span>, lpWindowName=<span class="literal">None</span>):</span><br><span class="line"><span class="comment">#自顶层窗口开始寻找匹配条件的窗口，并返回这个窗口的句柄。</span></span><br><span class="line"><span class="comment">#lpClassName：类名，在Spy++里能够看到</span></span><br><span class="line"><span class="comment">#lpWindowName：窗口名，标题栏上能看到的名字</span></span><br><span class="line"><span class="comment">#代码示例里我们用来寻找上传窗口，你可以只用其中的一个，用classname定位容易被其他东西干扰，用windowname定位不稳定，不同的上传对话框可能window_name不同，怎么定位取决于你的情况。 </span></span><br><span class="line">win32gui.FindWindowEx(hwndParent=<span class="number">0</span>, hwndChildAfter=<span class="number">0</span>, lpszClass=<span class="literal">None</span>, lpszWindow=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#搜索类名和窗体名匹配的窗体，并返回这个窗体的句柄。找不到就返回0。</span></span><br><span class="line"><span class="comment">#hwndParent：若不为0，则搜索句柄为hwndParent窗体的子窗体。</span></span><br><span class="line"><span class="comment">#hwndChildAfter：若不为0，则按照z-index的顺序从hwndChildAfter向后开始搜索子窗体，否则从第一个子窗体开始搜索。</span></span><br><span class="line"><span class="comment">#lpClassName：字符型，是窗体的类名，这个可以在Spy++里找到。</span></span><br><span class="line"><span class="comment">#lpWindowName：字符型，是窗口名，也就是标题栏上你能看见的那个标题。</span></span><br><span class="line"><span class="comment">#代码示例里我们用来层层寻找输入框和寻找确定按钮 </span></span><br><span class="line">win32gui.SendMessage(hWnd, Msg, wParam, lParam)</span><br><span class="line"><span class="comment">#hWnd：整型，接收消息的窗体句柄</span></span><br><span class="line"><span class="comment">#Msg：整型，要发送的消息，这些消息都是windows预先定义好的，可以参见系统定义消息（System-Defined Messages）</span></span><br><span class="line"><span class="comment">#wParam：整型，消息的wParam参数</span></span><br><span class="line"><span class="comment">#lParam：整型，消息的lParam参数</span></span><br><span class="line"><span class="comment">#代码示例里我们用来向输入框输入文件地址以及点击确定按钮</span></span><br></pre></td></tr></table></figure><h5 id="SendKeys"><a href="#SendKeys" class="headerlink" title="SendKeys"></a>SendKeys</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install SendKeys </span><br></pre></td></tr></table></figure><p>通过SendKeys库可以直接向焦点里输入信息，不过要注意在打开窗口是略微加一点等待时间，否则容易第一个字母send不进去（或者你可以在地址之前加一个无用字符，不推荐）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> win32gui</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">dr = webdriver.Firefox()</span><br><span class="line">dr.get(<span class="string">&#x27;http://sahitest.com/demo/php/fileUpload.htm&#x27;</span>)</span><br><span class="line">upload = dr.find_element_by_id(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">upload.click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SendKeys</span></span><br><span class="line">SendKeys.SendKeys(<span class="string">&#x27;D:\\baidu.py&#x27;</span>) <span class="comment"># 发送文件地址</span></span><br><span class="line">SendKeys.SendKeys(<span class="string">&quot;&#123;ENTER&#125;&quot;</span>) <span class="comment"># 发送回车键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> upload.get_attribute(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">dr.quit()</span><br></pre></td></tr></table></figure><h5 id="keybd-event"><a href="#keybd-event" class="headerlink" title="keybd_event"></a>keybd_event</h5><p>win32api提供了一个keybd_event()方法模拟按键</p><h5 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h5><p>多文件上传就是在文件路径框里用引号括起单个路径，然后用逗号隔开多个路径，例如：“D:\a.txt” “D:\b.txt”<br>注意：只有多个文件在同一路径下，才能这样用，否则是会失败的</p><h3 id="切换iframe"><a href="#切换iframe" class="headerlink" title="切换iframe"></a>切换iframe</h3><h4 id="1-有id，并且唯一，直接写id"><a href="#1-有id，并且唯一，直接写id" class="headerlink" title="1.有id，并且唯一，直接写id"></a>1.有id，并且唯一，直接写id</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to_frame(<span class="string">&quot;x-URS-iframe&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-有name，并且唯一，直接写name"><a href="#2-有name，并且唯一，直接写name" class="headerlink" title="2.有name，并且唯一，直接写name"></a>2.有name，并且唯一，直接写name</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to_frame(<span class="string">&quot;xxxx&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-无id，无name-先定位iframe元素"><a href="#3-无id，无name-先定位iframe元素" class="headerlink" title="3.无id，无name,先定位iframe元素"></a>3.无id，无name,先定位iframe元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iframe = driver.find_elements_by_tag_name(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">driver.switch_to_frame(iframe)</span><br><span class="line">driver.switch_to.frame(driver.find_element_by_xpath(<span class="string">&quot;//iframe[contains(@src,&#x27;myframe&#x27;)]&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="5-从frame中切回主文档-switch-to-default-content"><a href="#5-从frame中切回主文档-switch-to-default-content" class="headerlink" title="5.从frame中切回主文档(switch_to.default_content())"></a>5.从frame中切回主文档(switch_to.default_content())</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><h4 id="6-嵌套frame的操作-switch-to-parent-frame"><a href="#6-嵌套frame的操作-switch-to-parent-frame" class="headerlink" title="6.嵌套frame的操作(switch_to.parent_frame())"></a>6.嵌套frame的操作(switch_to.parent_frame())</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;frame1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;frame2&quot;</span> / &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从主文档切到frame2，一层层切进去</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;frame1&quot;</span>)</span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;frame2&quot;</span>)</span><br><span class="line"><span class="comment">#从frame2再切回frame1，这里selenium给我们提供了一个方法能够从子frame切回到父frame，而不用切回主文档再切进来。</span></span><br><span class="line">driver.switch_to.parent_frame()  <span class="comment"># 如果当前已是主文档，则无效果</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python-selenium&quot;&gt;&lt;a href=&quot;#python-selenium&quot; class=&quot;headerlink&quot; title=&quot;python selenium&quot;&gt;&lt;/a&gt;python selenium&lt;/h2&gt;&lt;h3 id=&quot;弹出框处理的实现&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Test" scheme="https://guobq.github.io/categories/Test/"/>
    
    <category term="automation" scheme="https://guobq.github.io/categories/Test/automation/"/>
    
    
    <category term="python" scheme="https://guobq.github.io/tags/python/"/>
    
    <category term="selenium" scheme="https://guobq.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>GitHub-Page搭建个人博客</title>
    <link href="https://guobq.github.io/bq/5ae0fba5.html"/>
    <id>https://guobq.github.io/bq/5ae0fba5.html</id>
    <published>2020-10-06T16:00:00.000Z</published>
    <updated>2021-06-03T14:44:12.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装，建立和启动Hexo"><a href="#安装，建立和启动Hexo" class="headerlink" title="安装，建立和启动Hexo"></a>安装，建立和启动Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装hexo-cli</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装插件</span></span><br><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立Hexo工程，并<span class="built_in">cd</span>到博客目录里，安装相应的包</span></span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成静态文件，public文件夹</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动Hexo</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="修改主题（Fan）"><a href="#修改主题（Fan）" class="headerlink" title="修改主题（Fan）"></a>修改主题（Fan）</h3><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p><a href="https://github.com/fan-lv/Fan">https://github.com/fan-lv/Fan</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取选择的主题</span></span><br><span class="line">git clone https://github.com/fan-lv/Fan.git themes/Fan</span><br><span class="line"><span class="meta">#</span><span class="bash"> _config.yml中修改主题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: Fan</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新主题</span></span><br><span class="line">cd themes\Fan</span><br><span class="line">git pull</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">npm install --save hexo-renderer-pug hexo-renderer-stylus</span><br><span class="line">npm install --save hexo-generator-feed hexo-generator-sitemap hexo-generator-archive hexo-browsersync</span><br></pre></td></tr></table></figure><h4 id="文章（Markdown-文件）设置"><a href="#文章（Markdown-文件）设置" class="headerlink" title="文章（Markdown 文件）设置"></a>文章（Markdown 文件）设置</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 标题</span><br><span class="line">title: xxx</span><br><span class="line"># 作者</span><br><span class="line">author: xxx</span><br><span class="line"># 标签</span><br><span class="line">tags:</span><br><span class="line">  - xxx</span><br><span class="line"># 分类</span><br><span class="line">categories:</span><br><span class="line">  - xxx</span><br><span class="line">date: xxx</span><br><span class="line"># 支持置顶</span><br><span class="line">top: 1</span><br></pre></td></tr></table></figure><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>打开blog目录下的_config.yml配置文件，改如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/guobq/guobq.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装插件</span></span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署到github</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>_config.yml配置</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># comments</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">gitment:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">&#x27;guobq&#x27;</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">&#x27;https://github.com/guobq/k8s&#x27;</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">&#x27;a91e9ec426714f54a397&#x27;</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">&#x27;614ed1b11be02220c9a08cd1e8c3fda3195d60a4&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 可以自由配置 valine 的其他配置项（参考链接 https://valine.js.org/configuration.html)</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">    <span class="attr">appId:</span> <span class="string">&#x27;8xUuEcUoXahLwm69LVK1eumF-gzGzoHsz&#x27;</span></span><br><span class="line">    <span class="attr">appKey:</span> <span class="string">&#x27;NDF5dcJsxuEHHBOLlda7Y07b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a><a href="https://github.com/imsun/gitment">Gitment</a></h4><p>获取client_id,client_secret</p><p>1.打开<a href="https://github.com/settings/developers">https://github.com/settings/developers</a></p><p>2.New OAuth APP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Homepage URL:</span><br><span class="line">https://guobq.github.io/</span><br><span class="line"><span class="meta">#</span><span class="bash">开发就是本地的地址加端口，生产就不用说了</span></span><br><span class="line">Authorization callback URL：</span><br><span class="line">https://guobq.github.io/</span><br><span class="line"><span class="meta">#</span><span class="bash">开发就是本地的回调，这个概念不理解的话去学一下Oauth</span></span><br></pre></td></tr></table></figure><p>3.生成Client ID，CLient Secret</p><h4 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a><a href="https://valine.js.org/">Valine</a></h4><p>从<code>LeanCloud</code>的应用中得到的<code>appId</code>.</p><p><a href="https://leancloud.cn/">https://leancloud.cn/</a></p><p>登录或注册 LeanCloud, 进入控制台后点击左下角创建应用</p><p>进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了</p><h3 id="Algolia-search"><a href="#Algolia-search" class="headerlink" title="Algolia_search"></a>Algolia_search</h3><p>注册 <a href="https://www.algolia.com/users/sign_in">Algolia账户</a>，创建新的 Index，记下 <code>index name</code></p><p>安装扩展</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-algolia --save</span><br></pre></td></tr></table></figure><p>修改 Algolia 搜索 ACL（访问控制列表） 默认的 <code>Search-Only API Key</code> 不能修改，需要在 <code>All API Keys</code> -&gt; <code>New API Key</code></p><p>勾选 ACLs: <code>search</code> <code>addObject</code> <code>deleteObject</code> <code>listIndexes</code> <code>deletelndex</code></p><p>执行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HEXO_ALGOLIA_INDEXING_KEY=New API Key</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新索引</span></span><br><span class="line">hexo algolia</span><br></pre></td></tr></table></figure><p>获取 Key，更新站点根目录配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">applicationID:</span> <span class="string">&#x27;Application ID&#x27;</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&#x27;New API Key&#x27;</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&#x27;index name&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># algolia</span></span><br><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">applicationID:</span> <span class="string">&#x27;8ICB0LL54F&#x27;</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&#x27;b6e01221a0e1bdb34d69e088b9bd39d8&#x27;</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&#x27;blog&#x27;</span></span><br></pre></td></tr></table></figure><p>主题配置下开启 Algolia_search</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="打开分类，标签，关于"><a href="#打开分类，标签，关于" class="headerlink" title="打开分类，标签，关于"></a>打开分类，标签，关于</h3><p>切换到主目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>./source/categories,tags,about目录下，会生成index.md</p><p>categories/index.md</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">layout:</span> <span class="string">layout_single</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-09-09</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>tags/index.md</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-09-09</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>about/index.md</p><p>自定义</p><h3 id="生成永久文章链接"><a href="#生成永久文章链接" class="headerlink" title="生成永久文章链接"></a>生成永久文章链接</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p>插件源码地址: <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><blockquote><p>可能会出现依赖，依据提示安装即可。</p></blockquote><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><p>修改博客根目录配置文件 <code>_config.yml</code> 的 <code>permalink</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">p/:abbrlink.html</span>  <span class="comment"># p 是自定义的前缀</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>不同算法和进制生成不同的格式：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">66c8</span><br><span class="line">crc16 &amp; dec</span><br><span class="line">65535</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">8ddf18fb</span><br><span class="line">crc32 &amp; dec</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><h4 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h4><p>先清理下本地的文件 <code>hexo clean</code>，然后重新生成 <code>hexo g</code>，启动博客 <code>hexo s</code>。该插件会在每篇文章的开头增加内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abbrlink: df27ccfb</span><br></pre></td></tr></table></figure><p>这个字符串就是这篇文章的唯一标识，无论修改标题还是发布文章都不会改变。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hexo.io/">https://hexo.io/</a></p><p><a href="https://valine.js.org/">https://valine.js.org/</a></p><p><a href="https://blog.csdn.net/u011116672/article/details/51160742">https://blog.csdn.net/u011116672/article/details/51160742</a></p><p><a href="https://blog.csdn.net/weixin_43870742/article/details/102004099">https://blog.csdn.net/weixin_43870742/article/details/102004099</a></p><p><a href="https://blog.csdn.net/qq_42595443/article/details/82466442?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight">https://blog.csdn.net/qq_42595443/article/details/82466442?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight</a></p><p><a href="https://www.dazhuanlan.com/2019/11/03/5dbeaac238b49/?__cf_chl_jschl_tk__=53c7e61c6cb87976027ff79b485e7bc157d29a40-1602087870-0-AUbOpkBUnGVqTiIPnn1W8j-mk4RiIIk1-VQEcAnnN1JciituXSOs_o7b-405C3oJBLMXE-meOUymlyBwQ0f4jh7Cy3lAeQEblSmezSNOjfACC7iyIoYjP_ZSr0g2rpL-u8U6LeS93EJquJ0jbM7CYuks8Uk2vE6dnkMjTmaEA4peQcMPbE75lqujsB1Ax6lBPIa4dVYUD4iMoLE2BN6E-jVmJqJOb3X4SbtKRwSXMZP0-cPVpi46NOcvpSLgIr5vDKxDJHUd6PPgbsxy6Q-ywtneDqnTqZofb4wjdp-_FJaw_Z-cOWTnRWeFLEngd33Olg">https://www.dazhuanlan.com/2019/11/03/5dbeaac238b49/?__cf_chl_jschl_tk__=53c7e61c6cb87976027ff79b485e7bc157d29a40-1602087870-0-AUbOpkBUnGVqTiIPnn1W8j-mk4RiIIk1-VQEcAnnN1JciituXSOs_o7b-405C3oJBLMXE-meOUymlyBwQ0f4jh7Cy3lAeQEblSmezSNOjfACC7iyIoYjP_ZSr0g2rpL-u8U6LeS93EJquJ0jbM7CYuks8Uk2vE6dnkMjTmaEA4peQcMPbE75lqujsB1Ax6lBPIa4dVYUD4iMoLE2BN6E-jVmJqJOb3X4SbtKRwSXMZP0-cPVpi46NOcvpSLgIr5vDKxDJHUd6PPgbsxy6Q-ywtneDqnTqZofb4wjdp-_FJaw_Z-cOWTnRWeFLEngd33Olg</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装，建立和启动Hexo&quot;&gt;&lt;a href=&quot;#安装，建立和启动Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装，建立和启动Hexo&quot;&gt;&lt;/a&gt;安装，建立和启动Hexo&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="服务搭建" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="GitHubPage" scheme="https://guobq.github.io/tags/GitHubPage/"/>
    
    <category term="Hexo" scheme="https://guobq.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Selenium&amp;appium grid</title>
    <link href="https://guobq.github.io/bq/3d268e98.html"/>
    <id>https://guobq.github.io/bq/3d268e98.html</id>
    <published>2020-09-17T16:00:00.000Z</published>
    <updated>2021-04-11T14:51:38.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="部署selenium-hub与浏览器节点"><a href="#部署selenium-hub与浏览器节点" class="headerlink" title="部署selenium hub与浏览器节点"></a>部署selenium hub与浏览器节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部署selenium hub （java -jar selenium-server-standalone-3.141.59.jar -role hub）</span></span><br><span class="line">docker run -d -p 4444:4444 --name hub -e GRID_TIMEOUT=0 -e GRID_THROW_ON_CAPABILITY_NOT_PRESENT-true -e GRID_NEW_SESSION_WAIT_TIMEOUT=-1 -e GRID_BROWSER_TIMEOUT=15000 -e GRID_TIMEOUT=30000 -e GRID_CLEAN_UP_CYCLE=30000 selenium/hub:3.141 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署node-chrome浏览器节点，debug模式可以通过VNC查看，密码secret（--link hub关联到hub，需同网段）</span></span><br><span class="line">docker run -d -p 5900:5900 --name node -e NODE_MAX_INSTANCES=6 -e NODE_MAX_SESSION=6 -e NODE_REGISTER_CYCLE=5000 -e DBUS_SESSION_BUS_ADDRESS=/dev/null -v /dev/shm:/dev/shm --link hub selenium/node-chrome-debug:3.141 </span><br></pre></td></tr></table></figure><h3 id="移动端接入"><a href="#移动端接入" class="headerlink" title="移动端接入"></a>移动端接入</h3><p><a href="https://blog.csdn.net/chen072086/article/details/106503548?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">https://blog.csdn.net/chen072086/article/details/106503548?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设备注册到hub</span></span><br><span class="line">cd &#x27;/c/Program Files/Appium/resources/app/node_modules/appium/build/lib&#x27;</span><br><span class="line">node main.js -a 127.0.0.1 -p 4723 -bp 4725 -U 8676-A01-0x3da2c286 --nodeconfig /d/bq/config/dason.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置说明</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;capabilities&quot;:</span><br><span class="line">      [</span><br><span class="line">        &#123;</span><br><span class="line">  &quot;deviceName&quot;: &quot;127.0.0.1:62001&quot;, #此为adb devices检测到的设备名</span><br><span class="line">          &quot;version&quot;:&quot;4.4.2&quot;,#模拟器/真机的系统版本</span><br><span class="line">          &quot;maxInstances&quot;: 1,#最多的实例个数</span><br><span class="line">          &quot;platform&quot;:&quot;ANDROID&quot;, #测试平台：Android</span><br><span class="line">  &quot;browserName&quot;: &quot;&quot; #测试普通App可置为空，如果是测试浏览器如chrome就可以写上</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">  &quot;configuration&quot;:</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;cleanUpCycle&quot;:2000,</span><br><span class="line">    &quot;timeout&quot;:30000,</span><br><span class="line">    &quot;proxy&quot;: &quot;org.openqa.grid.selenium.proxy.DefaultRemoteProxy&quot;,</span><br><span class="line">    &quot;hub&quot;:&quot;127.0.0.1:4444/grid/register&quot;,  #hub的注册接口地址</span><br><span class="line">    &quot;url&quot;:&quot;http://127.0.0.1:4723/wd/hub&quot;,#Appium Server的默认访问路径</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,#Appium Server的IP地址</span><br><span class="line">    &quot;port&quot;: 4723,#Appium Server端口号</span><br><span class="line">    &quot;maxSession&quot;: 1,</span><br><span class="line">    &quot;register&quot;: true,</span><br><span class="line">    &quot;registerCycle&quot;: 5000,</span><br><span class="line">    &quot;hubPort&quot;: 4444,#hub端口号</span><br><span class="line">    &quot;hubHost&quot;: &quot;127.0.0.1&quot;,#hub IP地址，这里是在本机上启动的，如果是在另外的机器上需要用其外部的IP地址，比如：192.168.1.111这种</span><br><span class="line">    &quot;hubProtocol&quot;: &quot;http&quot;#协议，默认为http</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置参考</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;capabilities&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;deviceName&quot;: &quot;8676-A01-0x3da2c286&quot;,</span><br><span class="line">&quot;version&quot;: &quot;5.1&quot;,</span><br><span class="line">&quot;maxInstances&quot;: 1,</span><br><span class="line">&quot;platform&quot;: &quot;ANDROID&quot;,</span><br><span class="line">&quot;browserName&quot;: &quot;chrome&quot;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;configuration&quot;: &#123;</span><br><span class="line">&quot;cleanUpCycle&quot;: 2000,</span><br><span class="line">&quot;timeout&quot;: 30000,</span><br><span class="line">&quot;proxy&quot;: &quot;org.openqa.grid.selenium.proxy.DefaultRemoteProxy&quot;,</span><br><span class="line">&quot;hub&quot;: &quot;http://192.168.0.108:4444/grid/register&quot;,</span><br><span class="line">&quot;url&quot;: &quot;http://127.0.0.1:4723/wd/hub&quot;,</span><br><span class="line">&quot;host&quot;: &quot;192.168.0.103&quot;,</span><br><span class="line">&quot;port&quot;: 4723,</span><br><span class="line">&quot;maxSession&quot;: 1,</span><br><span class="line">&quot;register&quot;: true,</span><br><span class="line">&quot;registerCycle&quot;: 5000,</span><br><span class="line">&quot;hubPort&quot;: 4444,</span><br><span class="line">&quot;hubHost&quot;: &quot;192.168.0.108&quot;,</span><br><span class="line">&quot;hubProtocol&quot;: &quot;http&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;部署selenium-hub与浏览器节点&quot;&gt;&lt;a href=&quot;#部署selenium-hub与浏览器节点&quot; class=&quot;headerlink&quot; title=&quot;部署selenium hub与浏览器节点&quot;&gt;&lt;/a&gt;部署selenium hub与浏览器节点&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="Test" scheme="https://guobq.github.io/categories/Test/"/>
    
    <category term="automation" scheme="https://guobq.github.io/categories/Test/automation/"/>
    
    
    <category term="selenium hub" scheme="https://guobq.github.io/tags/selenium-hub/"/>
    
    <category term="grid" scheme="https://guobq.github.io/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>httprunner3.x</title>
    <link href="https://guobq.github.io/bq/f4f84727.html"/>
    <id>https://guobq.github.io/bq/f4f84727.html</id>
    <published>2020-09-17T16:00:00.000Z</published>
    <updated>2021-04-11T14:39:57.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="httprunner"><a href="#httprunner" class="headerlink" title="httprunner"></a>httprunner</h2><p>相关：python，pytest，allure，locust，requests，git</p><h3 id="ENV-prepare"><a href="#ENV-prepare" class="headerlink" title="ENV prepare"></a>ENV prepare</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install httprunner -i https://pypi.douban.com/simple</span><br><span class="line">hrun -V #查看版本</span><br><span class="line">httprunner --help #查看帮助</span><br><span class="line"><span class="meta">#</span><span class="bash">positional arguments:&#123;run,startproject,har2case,make&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">run Make HttpRunner testcases and run with pytest.运行httprunner文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">startproject Create a new project with template structure.创建httprunner项目结构</span></span><br><span class="line"><span class="meta">#</span><span class="bash">har2case Convert HAR(HTTP Archive) to YAML/JSON testcases <span class="keyword">for</span> HttpRunner.转换har文件为yml文件或者json文件或者pytest文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">make Convert YAML/JSON testcases to pytest cases. 转换yml或json文件为pytest文件</span></span><br></pre></td></tr></table></figure><h3 id="create-project"><a href="#create-project" class="headerlink" title="create project"></a>create project</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cmd到项目文件下执行:</span></span><br><span class="line">httprunner startproject interfacedemo#interfacedemo为接口项目名称</span><br></pre></td></tr></table></figure><h4 id="各个目录代表的含义："><a href="#各个目录代表的含义：" class="headerlink" title="各个目录代表的含义："></a><strong>各个目录代表的含义：</strong></h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- debugtalk.py 放置在项目根目录下（类似pytest的conftest文件）</span><br><span class="line">- .env 放置在项目根目录下，可以用于存放一些环境变量</span><br><span class="line">- reports 文件夹：存储 HTML 测试报告</span><br><span class="line">- testcases 用于存放测试用例</span><br><span class="line">- har 可以存放录制导出的.har文件</span><br><span class="line">- .gitignore 设置上传到git时需要忽略那些文件信息</span><br></pre></td></tr></table></figure><h4 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a><strong>执行方式</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、hrun interfaceDemo</span><br><span class="line"><span class="meta">#</span><span class="bash">命令等价于httprunner run interfaceDemo，其中先进行httprunner make json/yml，会将json/yml文件先转换为pytest文件，之后再执行hrun(httprunner run)，如果pytest文件是已经存在的（你直接编写的pytest文件，而不是yml或者json），httprunner会直接运行你的pytest脚本，不需要进行转换，官方推荐：直接使用pytest脚本编写</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在tacecases目录下生成py文件，生成的py文件会加上_test后缀，如果yml或者json文件有修改，需要再次http make scriptPath一下，或者直接修改py文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成了logs日志文件，每一个yml都会对应生成一个日志文件如下，每一个testcase脚本都会又要给唯一的id，对应了日志文件的文件名：</span></span><br><span class="line">2、pytest interfaceDemo</span><br><span class="line"><span class="meta">#</span><span class="bash">前提，已经使用hrun interfaceDemo生成了yml或json对应的pytest文件，否则不生效</span></span><br></pre></td></tr></table></figure><h3 id="har文件录制及转换"><a href="#har文件录制及转换" class="headerlink" title="har文件录制及转换"></a>har文件录制及转换</h3><p><img src="https://raw.githubusercontent.com/guobq/mysource/master/PictureBed/httprunner%E8%84%9A%E6%9C%AC%E8%BD%AC%E6%8D%A2.png" alt="httprunner脚本转换"></p><p>工具：Fiddler，Charles，Chrome等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">har2case har_demo.har -2j#生成json文件命令</span><br><span class="line">har2case har_demo.har -2y#生成yml文件命令</span><br><span class="line">har2case har_demo.json/har_demo.yml#转换为py文件</span><br><span class="line"><span class="meta">#</span><span class="bash">可以使用:hrun har_demo_test.py/har_demo.json/har_demo.yml运行脚本</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用pytest har_demo_test.py只能运行py文件，不能运行yml或者json</span></span><br></pre></td></tr></table></figure><h3 id="测试用例结构"><a href="#测试用例结构" class="headerlink" title="测试用例结构"></a>测试用例结构</h3><p>每个测试用例都是的子类HttpRunner，并且必须具有两个类属性：config和teststeps。<br>配置：配置测试用例级别设置，其中包括base_url，verify，variables，export。<br>teststeps：teststep（List[Step]）的列表，每个步骤都对应一个API请求或另一个测试用例引用调用。此外，variables/ extract/ validate/ hooks机制支持，可制作十分复杂的测试方案，可以参数传递、参数提取、断言、以及其他hook机制，可以自定义钩子函数，也支持pytest和、locust的相关操作，例如：我们可以增加一个pytest.ini文件，在其中进行测试用例目录检索的操作等</p><h4 id="chain-call"><a href="#chain-call" class="headerlink" title="chain call"></a>chain call</h4><p>就是IDEA的api代码自动补全</p><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>每个测试用例都应该有一个config部分，您可以在其中配置测试用例级别的设置。</p><h4 id="name（必填）"><a href="#name（必填）" class="headerlink" title="name（必填）"></a>name（必填）</h4><p>指定测试用例名称。这将显示在执行日志和测试报告中</p><h4 id="base-url（可选）"><a href="#base-url（可选）" class="headerlink" title="base_url（可选）"></a>base_url（可选）</h4><p>指定SUT的通用架构和主机部分，例如<a href="https://postman-echo.com.如果base_url指定,则teststep中的url只能设置相对路径部分.如果要在不同的sut环境之间切换,这将特别有用./">https://postman-echo.com。如果base_url指定，则teststep中的url只能设置相对路径部分。如果要在不同的SUT环境之间切换，这将特别有用。</a></p><h4 id="variables（可选）"><a href="#variables（可选）" class="headerlink" title="variables（可选）"></a>variables（可选）</h4><p>指定测试用例的公共变量。每个测试步骤都可以引用未在步骤变量中设置的配置变量。换句话说，步骤变量比配置变量具有更高的优先级。</p><h4 id="verify-（可选）"><a href="#verify-（可选）" class="headerlink" title="verify （可选）"></a>verify （可选）</h4><p>指定是否验证服务器的TLS证书。如果我们想记录测试用例执行的HTTP流量，这将特别有用，因为如果没有设置verify或将其设置为True，则会发生SSLError。<br>SSLError（SSLCertVerificationError（1，’[SSL：CERTIFICATE_VERIFY_FAILED]证书验证失败：证书链中的自签名证书（_ssl.c：1076）’）</p><h4 id="export-（可选）"><a href="#export-（可选）" class="headerlink" title="export （可选）"></a>export （可选）</h4><p>指定导出的测试用例会话变量。将每个测试用例视为一个黑盒，config variables是输入部分，而config export是输出部分。特别是，当一个测试用例在另一个测试用例的步骤中被引用，并且将被提取一些会话变量以在后续测试步骤中使用时，则提取的会话变量应在配置export部分中进行配置。将测试用例的某些变量指定为全局变量。（PS：不配置export在另一个引用类中进行该类的变量调用时，直接export也是可以的，最好还是配置一下）</p><p><img src="https://raw.githubusercontent.com/guobq/mysource/master/PictureBed/HR%E7%94%A8%E4%BE%8B%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png"></p><p>一个测试套件testsuite，套件中会有很多的测试用例testcase，testcase之间可以相互引用teststep，通过with_jmespath进行参数的提取，通过call引用其他测试用例类，然后通过export引用其他测试用例的变量。teststeps中会有很多step，也就是常说的测试步骤，一个step中只有RunRequest或者RunTestCase，step的先后顺序，有step的前后控制，由step所处的位置由上到下执行</p><h4 id="RunRequest（名称）"><a href="#RunRequest（名称）" class="headerlink" title="RunRequest（名称）"></a>RunRequest（名称）</h4><p>RunRequest 在一个步骤中用于向API发出请求，并对响应进行一些提取或验证。<br>.nameRunRequest 的参数用于指定测试步骤名称，该名称将显示在执行日志和测试报告中。<br>.with_variables<br>指定测试步骤变量。每个步骤的变量都是独立的，因此，如果要在多个步骤中共享变量，则应在配置变量中定义变量。此外，步骤变量将覆盖配置变量中具有相同名称的变量。（PS:注意参数传递的格式使用**{}，使用关键字参数解包的方式进行参数传递给with_variables），参数引用使用”$变量名”，如果是函数引用使用”${函数名()}”</p><h4 id="method（url）"><a href="#method（url）" class="headerlink" title="method（url）"></a>method（url）</h4><p>指定HTTP方法和SUT的URL。这些对应于method和url参数requests.request。<br>如果base_url在config中设置，则url只能设置相对路径部分。如果在Config中设置了baseurl，method中只能设置相对路径，可选参数为get/post/put/delete/等。<br>.with_params<br>指定请求网址的查询字符串。这对应于的params参数requests.request。<br>.with_headers<br>为请求指定HTTP标头。这对应于的headers参数requests.request。<br>.with_cookies<br>指定HTTP请求cookie。这对应于的cookies参数requests.request。<br>.with_data<br>指定HTTP请求正文。这对应于的data参数requests.request。<br>.with_json<br>在json中指定HTTP请求正文。这对应于的json参数requests.request。</p><h4 id="extract（数据提取）"><a href="#extract（数据提取）" class="headerlink" title="extract（数据提取）"></a>extract（数据提取）</h4><p>.WITH_JMESPATH<br>使用jmespath提取JSON响应主体。<br>with_jmespath（jmes_path：文字，var_name：文字）<br>jmes_path：jmespath表达式，有关更多详细信息，请参考JMESPath教程<br>var_name：存储提取值的变量名，可以在后续测试步骤中引用它<br>validate<br>.ASSERT_XXX<br>使用jmespath提取JSON响应主体并使用期望值进行验证。<br>assert_XXX（jmes_path：文本，期望值：任何，消息：文本=“”）<br>jmes_path：jmespath表达式，有关更多详细信息，请参考JMESPath教程<br>Expected_value：指定的期望值，变量或函数引用也可以在此处使用<br>消息（可选）：用于指示断言错误的原因</p><h4 id="RunTestCase（名称）"><a href="#RunTestCase（名称）" class="headerlink" title="RunTestCase（名称）"></a>RunTestCase（名称）</h4><p>RunTestCase 在一个步骤中用于引用另一个测试用例调用。<br>.name<br>RunTestCase 的参数用于指定测试步骤名称，该名称将显示在执行日志和测试报告中。<br>.with_variables<br>指定测试步骤变量。每个步骤的变量都是独立的，因此，如果要在多个步骤中共享变量，则应在配置变量中定义变量。此外，步骤变量将覆盖配置变量中具有相同名称的变量。<br>.call<br>指定引用的测试用例类。你在引用另一个测试用例的step中的参数时，需要先指定引用的测试用例类<br>.export<br>指定会话变量名称以从引用的测试用例中导出。导出的变量可以通过后续测试步骤step进行引用。导出的是step中的jmespath提取的变量，export之后，这个变量是全局变量，但是不能再confg中进行设置，因为测试类的引用是在step中进行的，而类的初始化是先初始化config，然后初始化teststeps，所以参数的传递在step之间</p><h3 id="env文件"><a href="#env文件" class="headerlink" title=".env文件"></a>.env文件</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、httprunner脚手架会默认创建创建.env文件，将需要设置为环境变量或全局变量的值，存储在env中</span><br><span class="line">2、使用$&#123;ENV(变量名)&#125;调用环境变量</span><br></pre></td></tr></table></figure><p>针对环境变量为列表信息的可以先设置为字符串，再进行字符串转列表操作</p><p>例如服务器连接（ip|port|user|pwd）：192.168.xxx.xxx|22|admin|admin</p><p>代码实现时，将字符串按“|”来进行切割，将结果保存在列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_file_to_service</span>(<span class="params">serviceInfo, local_path, remote_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param serviceInfo: 服务器信息格式：ip|port|user|pwd</span></span><br><span class="line"><span class="string">    :param local_path: 本地路径</span></span><br><span class="line"><span class="string">    :param remote_path: 远程路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    info = serviceInfo.split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line">    t = paramiko.Transport(info[<span class="number">0</span>], int(info[<span class="number">1</span>]))</span><br><span class="line">    t.connect(username=info[<span class="number">2</span>], password=info[<span class="number">3</span>])</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(t)</span><br><span class="line">    sftp.put(local_path, remote_path)  <span class="comment"># 上传文件到远程机</span></span><br><span class="line">    sftp.close()</span><br></pre></td></tr></table></figure><h3 id="debugtalk-py"><a href="#debugtalk-py" class="headerlink" title="debugtalk.py"></a>debugtalk.py</h3><p>debugtalk.py和pytest的conftest.py文件区别：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conftest.py文件中的定义对当前同级目录下及同级目录下的子目录下的脚本生效，而debugtalk.py按照脚手架的默认生成，只对同级目录testcases目录下的脚本生效，如果需要在testcase下面进行脚本的细分，创建新的模块目录，然后在里面添加测试脚本，是不生效的。</span><br></pre></td></tr></table></figure><p>debugtalk主要进行一些公共函数方法的编写例如常用的获取token、获取cookie，或者数据清理，环境初始化等操作，都可以放在debugtalk中。</p><p>将脚本中的方法引用到其他处，格式”${方法名}”，即能实现参数化</p><h3 id="setup和teardown及hook"><a href="#setup和teardown及hook" class="headerlink" title="setup和teardown及hook"></a>setup和teardown及hook</h3><p>httprunner的setup和teardown可以在yml或者json文件中定义(建议py文件中)</p><p>httprunner有两种setup和teardown的定义方式，一个是测试类级别，一个是测试步骤级别的定义。</p><h4 id="测试类级别的setup和teardown"><a href="#测试类级别的setup和teardown" class="headerlink" title="测试类级别的setup和teardown"></a>测试类级别的setup和teardown</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/user/bin/env python  </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之前&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之后&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br><span class="line"><span class="comment">#结果为：</span></span><br><span class="line"><span class="comment">#Process finished with exit code 0  </span></span><br><span class="line"><span class="comment">#运行于测试用例之前  </span></span><br><span class="line"><span class="comment">#PASSED [100%]... </span></span><br><span class="line"><span class="comment">#运行于测试用例之后  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/user/bin/env python  </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之前&quot;</span>)  </span><br><span class="line">         </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之后&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br><span class="line"><span class="comment">#上面两种写法在unittest和pytest中是不一样的，setup_class是运行于测试类的前面，setup是运行与每个测试方法的前面，在httprunner貌似不区分这两个方法。</span></span><br></pre></td></tr></table></figure><h4 id="测试步骤前后的setup和teardown"><a href="#测试步骤前后的setup和teardown" class="headerlink" title="测试步骤前后的setup和teardown"></a>测试步骤前后的setup和teardown</h4><p>在debugtalk.py中写hook_up和hook_teardown</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_up</span>():</span>  </span><br><span class="line">    print(<span class="string">&quot;前置操作：setup!&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_down</span>(<span class="params">response=None</span>):</span>  </span><br><span class="line">    print(<span class="string">&quot;后置操作：teardown!&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> response:  </span><br><span class="line">        print(response)  </span><br><span class="line">        response.status_code = <span class="number">300</span>  </span><br></pre></td></tr></table></figure><p>在demo_baidu_request_test.py中调用debugtalk的两个hook方法，使用setup_hook()和teardown_hook()来加载我们自定义的hook：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之前&quot;</span>)  </span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之后&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .setup_hook(<span class="string">&quot;$&#123;hook_up()&#125;&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .teardown_hook(<span class="string">&quot;$&#123;hook_down()&#125;&quot;</span>)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line"><span class="comment">#Process finished with exit code 0  </span></span><br><span class="line"><span class="comment">#运行于测试用例之前  </span></span><br><span class="line"><span class="comment">#PASSED [100%]前置操作：setup!  </span></span><br><span class="line"><span class="comment">#后置操作：teardown!  </span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment">#运行于测试用例之后  </span></span><br></pre></td></tr></table></figure><p>既然是hook方法，那么肯定是会集成一些内置的钩子，满足特殊的要求所使用的。<br>setup_hooks:在测试步骤前执行，先调用setup_hooks()内的函数。可以传入 $request 参数，可以对请求进行预处理或者修改，修改请求参数<br>teardown_hooks:在测试步骤执行后，先调用teardown()内的函数，可以传入$response参数，可以对返回值进行处理<br>先在debugtalk.py中定义两个方法，输出一下后面获取的request和response.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_up</span>(<span class="params">request=None</span>):</span>  </span><br><span class="line">    print(<span class="string">&quot;输出request:&#123;&#125;&quot;</span>.format(request))  </span><br><span class="line">    print(<span class="string">&quot;前置操作：setup!&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_down</span>(<span class="params">response=None</span>):</span>  </span><br><span class="line">    print(<span class="string">&quot;输出response:&#123;&#125;&quot;</span>.format(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;%s:%s&#x27;</span> % item <span class="keyword">for</span> item <span class="keyword">in</span> response.__dict__.items()])))  </span><br><span class="line">    print(<span class="string">&quot;后置操作：teardown!&quot;</span>)  </span><br></pre></td></tr></table></figure><p>在demo_baidu_request_test.py文件中调用这两个hook，然后传递参数$request和$response。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之前&quot;</span>)  </span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之后&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .setup_hook(<span class="string">&quot;$&#123;hook_up($request)&#125;&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .teardown_hook(<span class="string">&quot;$&#123;hook_down($response)&#125;&quot;</span>)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br><span class="line"><span class="comment">#结果如下：</span></span><br><span class="line"><span class="comment">#Process finished with exit code 0  </span></span><br><span class="line"><span class="comment">#运行于测试用例之前  </span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment">#前置操作：setup!  </span></span><br><span class="line"><span class="comment">#resp_obj:&lt;Response [200]&gt;  </span></span><br><span class="line"><span class="comment">#validation_results:&#123;&#125;  </span></span><br><span class="line"><span class="comment">#后置操作：teardown!  </span></span><br></pre></td></tr></table></figure><p>传入的是一个request和response对象，可以对传入的request和response对象进行操作,修改resquest和response传入和返回的值，完成复杂的业务要求。<br>改变一下debugtalk.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_up</span>(<span class="params">request=None</span>):</span>  </span><br><span class="line">    print(<span class="string">&quot;输出request:&#123;&#125;&quot;</span>.format(request))  </span><br><span class="line">    print(<span class="string">&quot;前置操作：setup!&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> request:  </span><br><span class="line">        request[<span class="string">&quot;params&quot;</span>][<span class="string">&quot;username&quot;</span>] = <span class="string">&quot;888888&quot;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_down</span>(<span class="params">response=None</span>):</span>  </span><br><span class="line">    print(<span class="string">&quot;输出response:&#123;&#125;&quot;</span>.format(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;%s:%s&#x27;</span> % item <span class="keyword">for</span> item <span class="keyword">in</span> response.__dict__.items()])))  </span><br><span class="line">    print(<span class="string">&quot;后置操作：teardown!&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> response:  </span><br><span class="line">        response.status_code = <span class="number">404</span>  </span><br></pre></td></tr></table></figure><p>修改了传入的setp的密码为“888888”，修改了step返回的状态码为404，看一下调用情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之前&quot;</span>)  </span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span>(<span class="params">cls</span>):</span>  </span><br><span class="line">        print(<span class="string">&quot;运行于测试用例之后&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .variables(  </span><br><span class="line">            **&#123;  </span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">&quot;123456&quot;</span>  </span><br><span class="line">            &#125;  </span><br><span class="line">        )  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .setup_hook(<span class="string">&quot;$&#123;hook_up($request)&#125;&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .with_params(**&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;$&#123;username&#125;&quot;</span>&#125;)  </span><br><span class="line">            .teardown_hook(<span class="string">&quot;$&#123;hook_down($response)&#125;&quot;</span>)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br><span class="line"><span class="comment">#执行结果：</span></span><br><span class="line"><span class="comment">#test_start </span></span><br><span class="line"><span class="comment">#运行于测试用例之前  </span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment">#前置操作：setup!  </span></span><br><span class="line"><span class="comment">#输出response:resp_obj:&lt;Response [200]&gt;  </span></span><br><span class="line"><span class="comment">#validation_results:&#123;&#125;  </span></span><br><span class="line"><span class="comment">#后置操作：teardown  </span></span><br><span class="line"><span class="comment">#method   : GET  </span></span><br><span class="line"><span class="comment">#url      : https://www.baidu.com/?username=888888  </span></span><br><span class="line"><span class="comment">#httprunner.exceptions.ValidationFailure: assert status_code equal 200(int)  ==&gt; fail  </span></span><br><span class="line"><span class="comment">#check_item: status_code  </span></span><br><span class="line"><span class="comment">#check_value: 404(int)  </span></span><br><span class="line"><span class="comment">#assert_method: equal  </span></span><br><span class="line"><span class="comment">#expect_value: 200(int)  </span></span><br><span class="line"><span class="comment">#可以看到断言是失败的，设置的成功断言状态码是200，传入的request中的username开始是123456，截获请求参数后更改为了888888。在实际应用中，可以对于传入账号密码等进行加密，或者对于返回值的格式等进行解码操作</span></span><br></pre></td></tr></table></figure><h3 id="参数化数据驱动"><a href="#参数化数据驱动" class="headerlink" title="参数化数据驱动"></a>参数化数据驱动</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">支持三种入参，返回一个列表：</span><br><span class="line">1、列表：[&quot;iOS/10.1&quot;, &quot;iOS/10.2&quot;, &quot;iOS/10.3&quot;]</span><br><span class="line">2、Parameterize类的回调，例如csv：$&#123;parameterize(account.csv)&#125;</span><br><span class="line">3、debugtalk.py的回调，$&#123;gen_app_version()&#125;</span><br><span class="line">在使用参数化之前，首先要导入pytest包，和httprunner的Parameters这个类</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> Parameters  </span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&quot;param&quot;, Parameters(  </span></span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]&#125;  </span><br><span class="line">    ))  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_start</span>(<span class="params">self, param</span>):</span>  </span><br><span class="line">        super().test_start(param)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .variables(  </span><br><span class="line">            **&#123;  </span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">&quot;$&#123;get_username()&#125;&quot;</span>  </span><br><span class="line">            &#125;  </span><br><span class="line">        )  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .with_params(**&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;$username&quot;</span>&#125;)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br></pre></td></tr></table></figure><p>pytest.mark.parametrize()会先将param作为一个动态参数，传递给param，然后由httprunner在进行参数化，httprunner在pytest的parametrize上封装了一层，增加了csv及debugtalk.py参数化的支持。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> Parameters  </span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&quot;param&quot;, Parameters(  </span></span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]&#125;  </span><br><span class="line">    ))  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_start</span>(<span class="params">self, param</span>):</span>  </span><br><span class="line">        super().test_start(param)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .variables(  </span><br><span class="line">            **&#123;  </span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">&quot;$&#123;get_username()&#125;&quot;</span>  </span><br><span class="line">            &#125;  </span><br><span class="line">        )  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .with_params(**&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;$username&quot;</span>&#125;)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br></pre></td></tr></table></figure><h4 id="debugtalk-py的回调函数"><a href="#debugtalk-py的回调函数" class="headerlink" title="debugtalk.py的回调函数"></a>debugtalk.py的回调函数</h4><p>在debugtalk.py中定义一个函数，返回列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_username</span>():</span>  </span><br><span class="line">    <span class="keyword">return</span> [  </span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;111111&quot;</span>&#125;,  </span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;222222&quot;</span>&#125;,  </span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;333333&quot;</span>&#125;,  </span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;444444&quot;</span>&#125;,  </span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;555555&quot;</span>&#125;,  </span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;666666&quot;</span>&#125;,  </span><br><span class="line">    ]  </span><br></pre></td></tr></table></figure><p>在xx_test.py文件调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> Parameters  </span><br><span class="line"><span class="keyword">from</span> httprunner <span class="keyword">import</span> HttpRunner, Config, Step, RunRequest, RunTestCase  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBaiduRequestTestCase</span>(<span class="params">HttpRunner</span>):</span>  </span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&quot;param&quot;, Parameters(  </span></span><br><span class="line">        &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;$&#123;get_username()&#125;&quot;</span>&#125;  </span><br><span class="line">    ))  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_start</span>(<span class="params">self, param</span>):</span>  </span><br><span class="line">        super().test_start(param)  </span><br><span class="line">  </span><br><span class="line">    config = (  </span><br><span class="line">        Config(<span class="string">&quot;get user list&quot;</span>)  </span><br><span class="line">        .base_url(<span class="string">&quot;https://www.baidu.com&quot;</span>)  </span><br><span class="line">        .verify(<span class="literal">False</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    teststeps = [  </span><br><span class="line">        Step(  </span><br><span class="line">            RunRequest(<span class="string">&quot;get info&quot;</span>)  </span><br><span class="line">            .get(<span class="string">&quot;/&quot;</span>)  </span><br><span class="line">            .with_params(**&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;$username&quot;</span>&#125;)  </span><br><span class="line">            .validate()  </span><br><span class="line">            .assert_equal(<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>)  </span><br><span class="line">        )  </span><br><span class="line">    ]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    TestBaiduRequestTestCase().test_start()  </span><br></pre></td></tr></table></figure><h4 id="使用csv文件"><a href="#使用csv文件" class="headerlink" title="使用csv文件"></a>使用csv文件</h4><p>1.csv文件中的title要为变量名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name,pwd</span><br><span class="line">name1,123</span><br><span class="line">name2,123</span><br></pre></td></tr></table></figure><p>2.csv映射的时候，参数名要以“-”分割，name和pwd使用的-进行分割</p><p>3.csv的路径要使用相对路径，不支持绝对路径不支持\符号的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.parametrize(&quot;param&quot;, Parameters(  </span></span><br><span class="line">     &#123;<span class="string">&quot;name-pwd&quot;</span>: <span class="string">&quot;$&#123;parametrize(testdata/namepwd.csv)&#125;&quot;</span>&#125;  </span><br><span class="line"> )) </span><br></pre></td></tr></table></figure><h3 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h3><h4 id="pytest-html"><a href="#pytest-html" class="headerlink" title="pytest-html"></a>pytest-html</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-html#安装pytest-html插件</span><br><span class="line">hrun testcasesPath --html=path/report.html</span><br></pre></td></tr></table></figure><h4 id="allure"><a href="#allure" class="headerlink" title="allure"></a>allure</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成测试结果</span></span><br><span class="line">hrun testcasePath --alluredir=resultPath#测试结果存放路径</span><br><span class="line"><span class="meta">#</span><span class="bash">第一种方式，会生成静态资源文件，通过静态资源index.html地址访问</span></span><br><span class="line">allure generate resultPath -o reportPath</span><br><span class="line"><span class="meta">#</span><span class="bash">第二种方式，不会生成静态资源文件，启动一个web服务，提供ip和port在线访问</span></span><br><span class="line">allure serve resultPath</span><br></pre></td></tr></table></figure><h3 id="调试、XML消息支持、XML格式断言"><a href="#调试、XML消息支持、XML格式断言" class="headerlink" title="调试、XML消息支持、XML格式断言"></a>调试、XML消息支持、XML格式断言</h3><h4 id="添加调试信息"><a href="#添加调试信息" class="headerlink" title="添加调试信息"></a>添加调试信息</h4><p>在调试代码时，引入loguru打印日志(httprunner源码中作者使用loguru.logger进行日志打印)</p><p>可在debugtalk.py中沿用此模块来进行日志打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from loguru import logger</span><br></pre></td></tr></table></figure><p>使用print未必会打印，但是使用logger.info会将信息打印到命令行中，格式为: logger.info()</p><h4 id="XML消息支持"><a href="#XML消息支持" class="headerlink" title="XML消息支持"></a>XML消息支持</h4><p>将报文内容写在文档中，用例中调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将报文内容保存在.xml文件中，使用get_file_std（）方法读取文件内容返回</span></span><br><span class="line">最后将变量m_encoder付给data关键字</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_std</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="comment"># 获取当前脚本所在文件夹路径</span></span><br><span class="line">    curPath = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">    print(<span class="string">&#x27;curPath&#x27;</span>, curPath)</span><br><span class="line">    <span class="comment"># 获取文件路径</span></span><br><span class="line">    fileurl = os.path.join(curPath, <span class="string">&quot;messages/%s&quot;</span> % filename)</span><br><span class="line">    print(<span class="string">&#x27;fileurl&#x27;</span>, fileurl)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(fileurl, <span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br></pre></td></tr></table></figure><h4 id="xml报文断言实现"><a href="#xml报文断言实现" class="headerlink" title="xml报文断言实现"></a>xml报文断言实现</h4><h5 id="方案一：将xml报文内容作为整体进行断言操作"><a href="#方案一：将xml报文内容作为整体进行断言操作" class="headerlink" title="方案一：将xml报文内容作为整体进行断言操作"></a>方案一：将xml报文内容作为整体进行断言操作</h5><p>( 定义变量：xmlinfo <BatchNotifyRsp><ResultCode>0</ResultCode><ResultDec></ResultDec></BatchNotifyRsp>)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;batch user order sync interface&quot;</span></span><br><span class="line">    <span class="attr">base_url:</span> <span class="string">$&#123;ENV(49_HOST)&#125;</span></span><br><span class="line">    <span class="attr">verify:</span> <span class="literal">False</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">        <span class="attr">localpath:</span> <span class="string">&quot;D:\\work\\wy_only\\CtIntfDemo\\data\\update.txt&quot;</span></span><br><span class="line">        <span class="attr">remotepath:</span> <span class="string">&quot;/iot/Filesync/User_20201027150556_7169060048412345.txt&quot;</span></span><br><span class="line">        <span class="attr">49serv:</span> <span class="string">$&#123;ENV(49_SERV)&#125;</span></span><br><span class="line">        <span class="attr">oracle1:</span> <span class="string">$&#123;ENV(oracle11)&#125;</span></span><br><span class="line">        <span class="attr">xmlinfo:</span> <span class="string">&#x27;&lt;BatchNotifyRsp&gt;&lt;ResultCode&gt;0&lt;/ResultCode&gt;&lt;ResultDec&gt;&lt;/ResultDec&gt;&lt;/BatchNotifyRsp&gt;&#x27;</span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p>断言：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attr">variables:</span></span><br><span class="line">        <span class="attr">file_path:</span> <span class="string">&quot;data\\batchOrderSync.xml&quot;</span></span><br><span class="line">        <span class="attr">m_encoder:</span> <span class="string">$&#123;get_file_std($file_path)&#125;</span></span><br><span class="line">        <span class="attr">retbody:</span> <span class="string">$&#123;str_bytes($xmlinfo)&#125;</span> <span class="comment"># 将str格式转化为bytes格式</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">        <span class="attr">method:</span> <span class="string">POST</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/Sync/BatchOperatorNotify/User</span></span><br><span class="line">        <span class="attr">headers:</span></span><br><span class="line">            <span class="attr">Content-Type:</span> <span class="string">application/xml</span></span><br><span class="line">        <span class="attr">data:</span> <span class="string">$m_encoder</span></span><br><span class="line">    <span class="attr">validate:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>]</span><br><span class="line">        <span class="comment"># - eq: [body.BatchNotifyRsp.ResultCode, &quot;0&quot;]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">body</span>, <span class="string">$retbody</span>]   <span class="comment">#直接断言返回xml整体</span></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_bytes</span>(<span class="params">str</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param str:字符串</span></span><br><span class="line"><span class="string">    :return:bytes类型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bytes(str, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="方案二：将xml报文内容转为json格式，再将返回结果赋值为转化后的json，最后进行json格式断言。"><a href="#方案二：将xml报文内容转为json格式，再将返回结果赋值为转化后的json，最后进行json格式断言。" class="headerlink" title="方案二：将xml报文内容转为json格式，再将返回结果赋值为转化后的json，最后进行json格式断言。"></a>方案二：将xml报文内容转为json格式，再将返回结果赋值为转化后的json，最后进行json格式断言。</h5><p>teardown_hooks机制，会在断言之前执行</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">teardown_hooks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$&#123;teardown_hook_xml_json($response)&#125;</span></span><br></pre></td></tr></table></figure><p>断言：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">validate:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">&quot;status_code&quot;</span>, <span class="number">200</span>]</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">eq:</span> [<span class="string">body.BatchNotifyRsp.ResultCode</span>, <span class="string">&quot;0&quot;</span>]</span><br><span class="line">    <span class="comment">#- eq: [body, $retbody]   #直接断言返回xml整体</span></span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml_to_json</span>(<span class="params">xml_str</span>):</span></span><br><span class="line">    <span class="comment"># parse是的xml解析器</span></span><br><span class="line">    xml_parse = xmltodict.parse(xml_str)</span><br><span class="line">    <span class="comment"># json库dumps()是将dict转化成json格式,loads()是将json转化成dict格式。</span></span><br><span class="line">    <span class="comment"># dumps()方法的ident=1,格式化json</span></span><br><span class="line">    json_str = json.dumps(xml_parse, indent=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> json_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_hook_xml_json</span>(<span class="params">response</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将xml报文内容转化为json格式内容,并将返回内容替换成json格式</span></span><br><span class="line"><span class="string">    :param response: 返回报文对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    jsoninfo = xml_to_json(response.body)</span><br><span class="line">    response.body = json.loads(jsoninfo)</span><br></pre></td></tr></table></figure><h3 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h3><p>1.查看log时，或者报错信息是中文时，显示unicode编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以在httprunner/client.py 文件中添加 ensure_ascii=False修改以下代码如下：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_print</span>(<span class="params">req_or_resp, r_type</span>):</span></span><br><span class="line">msg = <span class="string">f&quot;\n================== <span class="subst">&#123;r_type&#125;</span> details ==================\n&quot;</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> req_or_resp.dict().items():</span><br><span class="line"><span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">value = json.dumps(value, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>2.cookies管理</p><p>httprunner继承requests,可自动管理</p><p>403 Forbidden,一般是网站处于安全考虑，缺少cookies导致(有些接口需要用到cookies，cookie没关联起来)</p><p>隐藏参数csrfmiddlewaretoken</p><p>csrfmiddlewaretoken参数是html页面上的隐藏参数,是为了防止跨域伪造请求。每次刷新页面都会自动变，需要先把此参数提取出来，动态关联到请求参数的body里面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;httprunner&quot;&gt;&lt;a href=&quot;#httprunner&quot; class=&quot;headerlink&quot; title=&quot;httprunner&quot;&gt;&lt;/a&gt;httprunner&lt;/h2&gt;&lt;p&gt;相关：python，pytest，allure，locust，request</summary>
      
    
    
    
    <category term="Test" scheme="https://guobq.github.io/categories/Test/"/>
    
    <category term="automation" scheme="https://guobq.github.io/categories/Test/automation/"/>
    
    
    <category term="httprunner" scheme="https://guobq.github.io/tags/httprunner/"/>
    
  </entry>
  
  <entry>
    <title>docker使用</title>
    <link href="https://guobq.github.io/bq/ea66df61.html"/>
    <id>https://guobq.github.io/bq/ea66df61.html</id>
    <published>2020-09-13T13:39:42.240Z</published>
    <updated>2021-06-03T14:03:40.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.停止所有的container，这样才能够删除其中的images：</span></span><br><span class="line">docker stop $(docker ps -a -q)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想要删除所有container：</span></span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看当前有些什么images</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.删除images，通过image的id来指定删除谁</span></span><br><span class="line">docker rmi &lt;image id&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 想要删除untagged images，也就是那些id为&lt;None&gt;的image的话可以用</span></span><br><span class="line">docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除全部image</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.退出并停止容器：（而后执行docker ps不能看到该容器）</span></span><br><span class="line">Ctrl+D</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.退出但不停止容器：而后执行docker ps能看到该容器）<span class="string">&quot;</span></span></span><br><span class="line">Ctrl+P+Q</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器(只能进入已经启动了的容器,若容器已经停止,则先执行docker start &lt;容器名称或ID&gt; 来启动容器)</span></span><br><span class="line">docker attach &lt;容器名称或ID&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动/停止容器</span></span><br><span class="line">docker start/stop &lt;容器名称或ID&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span></span><br><span class="line">docker images </span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交镜像,(docker commit &lt;容器名称或id&gt; &lt;自定镜像名称&gt;:&lt;自定版本号TAG&gt; )</span></span><br><span class="line">docker commit 2736  myproject:1.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像的修改历史</span></span><br><span class="line">docker history 镜像ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接到容器上运行bash</span></span><br><span class="line">docker exec -ti CONTAINER /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像</span></span><br><span class="line">docker rmi IMAGE ID</span><br><span class="line">docker rmi REPOSITORY+TAG</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">docker  version </span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索可用docker镜像</span></span><br><span class="line">docker  search centos</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像</span></span><br><span class="line">docker  pull  centos </span><br><span class="line"><span class="meta">#</span><span class="bash"> docker导入本地镜像</span></span><br><span class="line">cat  centos.tar | docker import  -  centos6  </span><br><span class="line"><span class="meta">#</span><span class="bash"> docker导出镜像</span></span><br><span class="line">docker  export  id  &gt; cenos6.tar  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在docker容器中运行hello world!</span></span><br><span class="line">docker run centos echo &quot;hello word&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器中安装ntpdate的程序</span></span><br><span class="line">docker run centos yum install ntpdate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭容器</span></span><br><span class="line">docker stop id </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动某个容器</span></span><br><span class="line">docker start id </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm id </span><br><span class="line"><span class="meta">#</span><span class="bash">容器主机间文件复制</span></span><br><span class="line"><span class="meta">#</span><span class="bash">从主机复制到容器</span></span><br><span class="line">sudo docker cp host_path containerID:container_path</span><br><span class="line"><span class="meta">#</span><span class="bash">从容器复制到主机</span></span><br><span class="line">sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure><h3 id="启动，端口映射及目录挂载"><a href="#启动，端口映射及目录挂载" class="headerlink" title="启动，端口映射及目录挂载"></a>启动，端口映射及目录挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从镜像启动容器</span></span><br><span class="line">docker run -d -p 9090:8080 --name testproject myproject:1.0.0 /root/run.sh</span><br><span class="line">-d：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示以“守护模式”执行/root/run.sh脚本，此时 Tomcat 控制台不会出现在输出终端上。此时需要查看日志使用命令:docker logs &lt;容器名称或ID&gt;</span></span><br><span class="line">-p：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示宿主机与容器的端口映射，此时将容器内部的 8080 端口映射为宿主机的 9090 端口，这样就向外界暴露了 9090 端口，可通过 Docker 网桥来访问容器内部的 8080 端口了。  </span></span><br><span class="line">--name：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示容器名称，用一个有意义的名称命名即可<span class="string">&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把所需要的环境（如jdk，tomcat等）拉取到docker容器中 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法一：启动一个容器，同时指定将宿主机中的某个文件夹挂载到docker容器中,-v参数中，冒号<span class="string">&quot;:&quot;</span>前面的目录是宿主机目录，后面的目录是容器内目录 </span></span><br><span class="line">docker run -i -t -v /myjava/:/mnt/software/ ubuntu /bin/bash</span><br><span class="line">-i:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以交互模式运行容器，通常与 -t 同时使用；</span></span><br><span class="line">-t:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为容器重新分配一个伪输入终端，通常与 -i 同时使用(容器启动后会进入其命令行)；</span></span><br><span class="line">-v: </span><br><span class="line"><span class="meta">#</span><span class="bash">指定宿主机的哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二：使用docker cp 命令拷贝文件，（docker cp &lt;宿主机目录或文件&gt; &lt;容器名称或id&gt;:&lt;容器目录&gt;）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若已经在容器里面，则先退出容器，退出容器后执行命令： </span></span><br><span class="line">docker cp myjava/ 190d:mnt/software/ </span><br></pre></td></tr></table></figure><h3 id="便捷搭建服务搭建"><a href="#便捷搭建服务搭建" class="headerlink" title="便捷搭建服务搭建"></a>便捷搭建服务搭建</h3><h4 id="jernkins"><a href="#jernkins" class="headerlink" title="jernkins"></a>jernkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v ~/docker/jenkins:/var/jenkins_home jenkins/jenkins</span><br><span class="line">chown -R 1000:1000 ~/docker/jenkins</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更换插件源地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入jenkins的工作目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">hudson.model.UpdateCenter.xml  </span></span><br><span class="line"><span class="meta">#</span><span class="bash">http://updates.jenkins-io/update-center.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash">改成</span></span><br><span class="line"><span class="meta">#</span><span class="bash">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 发现http://updates.jenkins-io/update-center.json https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json 内容一样,需修改json文件里的实际地址</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入Jenkins工作目录：</span></span><br><span class="line">cd /var/lib/jenkins/updates/</span><br><span class="line"><span class="meta">#</span><span class="bash">使用sed命令修改default.json文件：</span></span><br><span class="line">sed -i &#x27;s#https://updates.jenkins.io/download#https://mirrors.tuna.tsinghua.edu.cn/jenkins#g&#x27; default.json &amp;&amp; sed -i &#x27;s#http://www.google.com#https://www.baidu.com#g&#x27; default.json</span><br></pre></td></tr></table></figure><h5 id="jenkins节点失联"><a href="#jenkins节点失联" class="headerlink" title="jenkins节点失联"></a>jenkins节点失联</h5><p>如果您不想重新启动，则只需在从站上终止这些进程,然后再次启动从属代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef |grep java</span></span><br><span class="line">1006 11948 11930 0 Jul17？00:00:00 bash -c cd“/ mnt / jenkins”&amp;&amp; java -jar slave.jar</span><br><span class="line">1006 11949 11948 0 Jul17？00:02:55 java -jar slave.jar</span><br></pre></td></tr></table></figure><h5 id="Timestamper"><a href="#Timestamper" class="headerlink" title="Timestamper"></a>Timestamper</h5><p>job配置，构建环境中勾选：Add timestamps to the Console Output。执行时控制台输出就会在每一行显示时间</p><p>对于脚本化管道，只需将您的脚本包装在<code>timestamps &#123; &#125;</code> Eg中即可。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timestamps &#123;</span><br><span class="line">  <span class="comment">// do your job</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向声明管道添加选项</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  options &#123; timestamps () &#125;</span><br><span class="line">  <span class="comment">// stages and rest of pipeline.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局配置：在Jenkins配置的“时间戳”部分中选中“为所有管道版本启用”</p><h5 id="QQ-amp-微信通知"><a href="#QQ-amp-微信通知" class="headerlink" title="QQ&amp;微信通知"></a>QQ&amp;微信通知</h5><p><a href="https://my.oschina.net/u/4320414/blog/3930777">https://my.oschina.net/u/4320414/blog/3930777</a></p><h5 id="钉钉通知"><a href="#钉钉通知" class="headerlink" title="钉钉通知"></a>钉钉通知</h5><p><a href="https://blog.csdn.net/liujingqiu/article/details/87977396">https://blog.csdn.net/liujingqiu/article/details/87977396</a></p><p>重置Jenkins的build序号</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 系统管理-&gt;脚本命令行</span><br><span class="line">item = Jenkins.instance.getItemByFullName(<span class="string">&quot;your-job-name-here&quot;</span>)</span><br><span class="line"><span class="comment">//THIS WILL REMOVE ALL BUILD HISTORY</span></span><br><span class="line">item.builds.each() &#123; build -&gt;</span><br><span class="line">  build.delete()</span><br><span class="line">&#125;</span><br><span class="line">item.updateNextBuildNumber(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="sonar"><a href="#sonar" class="headerlink" title="sonar"></a>sonar</h4><h5 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker pull sonarqube</span><br><span class="line">docker run -p 5432:5432 --name db -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -d postgres</span><br><span class="line">docker run --name sq -e SONARQUBE_JDBC_URL=jdbc:postgresql://172.31.19.221:5432/sonar -e SONARQUBE_JDBC_USERNAME=sonar -e SONARQUBE_JDBC_PASSWORD=sonar -p 9000:9000 -d sonarqube</span><br><span class="line"><span class="meta">#</span><span class="bash">加插件:https://github.com/rhinoceros/sonar-p3c-pmd/releases/tag/pmd-3.2.0-beta-with-p3c1.3.6-pmd6.10.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">https://gitee.com/chenlingtao/sonar-pmd.git</span></span><br><span class="line">docker stop d0c95e1e9270</span><br><span class="line">docker cp /home/docker/sonarqube/extensions/plugins/sonar-pmd-plugin-3.2.0-SNAPSHOT.jar</span><br><span class="line">d0c95e1e9270:/opt/sonarqube/extensions/plugins</span><br><span class="line">docker start d0c95e1e9270</span><br><span class="line"><span class="meta">#</span><span class="bash">宿主机目录挂载,方便加插件</span></span><br><span class="line">docker run -v /home/bq/docker/sonarqube/extensions/plugins:/opt/sonarqube/extensions/plugins --name sq --link db -e SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar -e SONARQUBE_JDBC_USERNAME=sonar -e SONARQUBE_JDBC_PASSWORD=sonar -p 9000:9000 -d sonarqube</span><br><span class="line">docker run -v ~/docker/sonarqube/extensions/plugins:/opt/sonarqube/extensions/plugins --name sq -e SONARQUBE_JDBC_URL=jdbc:postgresql://172.17.225.160:5432/sonar -e SONARQUBE_JDBC_USERNAME=sonar -e SONARQUBE_JDBC_PASSWORD=sonar -p 9000:9000 -d sonarqube </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">内存要够,不够es抛137;sudo sysctl -w vm.max_map_count=524288 太小es抛78</span></span><br></pre></td></tr></table></figure><h5 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner.bat -D&quot;sonar.projectKey=homepage&quot; -D&quot;sonar.sources=./src&quot; -D&quot;sonar.java.binaries=./out&quot; -D&quot;sonar.host.url=http://ec2-<span class="number">52</span>-<span class="number">221</span>-<span class="number">237</span>-<span class="number">133</span>.ap-southeast-<span class="number">1</span>.compute.amazonaws.com:<span class="number">9000</span>&quot; -D&quot;sonar.login=<span class="number">31</span>d831eb5f55827eb84201821a921ed3131ae455&quot;</span><br></pre></td></tr></table></figure><h4 id="禅道"><a href="#禅道" class="headerlink" title="禅道"></a>禅道</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建docker网络驱动</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sudo docker network create --subnet=[ip范围] [网络驱动名]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ip范围：例如172.172.172.0/24的意思ip可以指定范围为172.172.172.1到172.172.172.254；网络驱动名：创建的网络驱动名，可随意指定；</span></span><br><span class="line">docker network create --subnet=172.172.172.0/24 zentaonet</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">docker run --name zentao -p 8090:80 --network=zentaonet --ip 172.172.172.172 --mac-address 02:42:ac:11:00:00 -v ~/docker/zentao/zentaopms:/www/zentaopms -v ~/docker/zentao/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d easysoft/zentao:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="工具" scheme="https://guobq.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="虚拟化" scheme="https://guobq.github.io/categories/%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="docker" scheme="https://guobq.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>influxdb&amp;Grafana搭建可视化监控平台</title>
    <link href="https://guobq.github.io/bq/a4dd3dba.html"/>
    <id>https://guobq.github.io/bq/a4dd3dba.html</id>
    <published>2020-09-12T16:00:00.000Z</published>
    <updated>2021-06-03T14:44:29.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="influxdb部署"><a href="#influxdb部署" class="headerlink" title="influxdb部署"></a>influxdb部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取influxdb镜像</span></span><br><span class="line">docker pull influxdb:1.8.1</span><br><span class="line"><span class="meta">#</span><span class="bash">启动influxdb</span></span><br><span class="line">docker run -d -p 8086:8086 --name influxdb influxdb:1.8.1</span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器</span></span><br><span class="line">docker exec -it influxdb bash</span><br><span class="line"><span class="meta">#</span><span class="bash">查看相关工具</span></span><br><span class="line">cd /usr/bin </span><br><span class="line">find | grep influx  </span><br><span class="line">./influx</span><br><span class="line">./influx_inspect</span><br><span class="line">./influx_stress</span><br><span class="line">./influx_tsm</span><br><span class="line">./influxd</span><br><span class="line"><span class="meta">#</span><span class="bash">查看Influxdb版本</span></span><br><span class="line">./influx -version</span><br><span class="line"><span class="meta">#</span><span class="bash">查看数据库</span></span><br><span class="line"><span class="meta">/usr/bin#</span><span class="bash"> ./influx</span></span><br><span class="line">Connected to http://localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">exit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建数据库</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create database testdb</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">testdb</span><br><span class="line"><span class="meta">#</span><span class="bash">删除数据库</span></span><br><span class="line">drop database [db_name]</span><br><span class="line"><span class="meta">#</span><span class="bash">使用数据库</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use testdb</span></span><br><span class="line">Using database testdb</span><br></pre></td></tr></table></figure><h3 id="grafana部署"><a href="#grafana部署" class="headerlink" title="grafana部署"></a>grafana部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取grafana镜像</span></span><br><span class="line">docker pull grafana/grafana:7.1.5</span><br><span class="line"><span class="meta">#</span><span class="bash">启动grafana</span></span><br><span class="line">docker run -d -p 3000:3000 --name grafana grafana/grafana:7.1.5</span><br><span class="line">（用户名密码默认为：admin）</span><br></pre></td></tr></table></figure><h3 id="ifluxdb的数据上传"><a href="#ifluxdb的数据上传" class="headerlink" title="ifluxdb的数据上传"></a>ifluxdb的数据上传</h3><p><a href="https://docs.influxdata.com/influxdb/v1.7/tools/shell/#import-data-from-a-file-with-import">https://docs.influxdata.com/influxdb/v1.7/tools/shell/#import-data-from-a-file-with-import</a></p><p>将单个点写入mydb数据库。数据包括测量值cpu_load_short，具有标签值server01和us-west的标签键host和region，具有字段值0.64的字段键值以及时间戳1434055562000000000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -XPOST &#x27;http://localhost:8086/write?db=mydb&#x27; --data-binary &#x27;cpu_load_short,host=server01,region=us-west value=0.64 1434055562000000000&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;influxdb部署&quot;&gt;&lt;a href=&quot;#influxdb部署&quot; class=&quot;headerlink&quot; title=&quot;influxdb部署&quot;&gt;&lt;/a&gt;influxdb部署&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="服务搭建" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="influxdb" scheme="https://guobq.github.io/tags/influxdb/"/>
    
    <category term="Grafana" scheme="https://guobq.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>idea设置</title>
    <link href="https://guobq.github.io/bq/7e386764.html"/>
    <id>https://guobq.github.io/bq/7e386764.html</id>
    <published>2020-09-07T16:00:00.000Z</published>
    <updated>2021-09-18T16:55:24.712Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注释中文乱码"><a href="#注释中文乱码" class="headerlink" title="注释中文乱码"></a>注释中文乱码</h3><p>已设置全局编码格式UTF-8，项目编码格式UTF-8，中文不能正常显示<br>如config.properties，里面中文注释显示为utf8字符编码数字<br>解决方法：file-&gt;settings-&gt;editor-&gt;file encodings<br>勾选（Transparent native-to-ascii converstion）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;注释中文乱码&quot;&gt;&lt;a href=&quot;#注释中文乱码&quot; class=&quot;headerlink&quot; title=&quot;注释中文乱码&quot;&gt;&lt;/a&gt;注释中文乱码&lt;/h3&gt;&lt;p&gt;已设置全局编码格式UTF-8，项目编码格式UTF-8，中文不能正常显示&lt;br&gt;如config.propert</summary>
      
    
    
    
    <category term="通用" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    <category term="工具与配置" scheme="https://guobq.github.io/categories/%E9%80%9A%E7%94%A8/%E5%B7%A5%E5%85%B7%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="idea设置" scheme="https://guobq.github.io/tags/idea%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Battery Historian--Android耗电分析</title>
    <link href="https://guobq.github.io/bq/5a092796.html"/>
    <id>https://guobq.github.io/bq/5a092796.html</id>
    <published>2020-08-18T16:00:00.000Z</published>
    <updated>2021-04-11T14:31:32.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Battery-Historian服务部署"><a href="#Battery-Historian服务部署" class="headerlink" title="Battery Historian服务部署"></a>Battery Historian服务部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search battery  </span><br><span class="line">docker run --name=battery -d -p 9999:9999 bhaavan/battery-historian</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如有代理</span></span><br><span class="line">docker run -p port_number：9999 gcr.io/android-battery-historian/stable:3.0 --port 9999</span><br></pre></td></tr></table></figure><p>浏览器打开：<a href="http://host:9999/">http://host:9999/</a></p><p>耗电统计是系统组件，伴随系统运行的整个过程，也就是说系统运行他就一直在统计。这个统计是基于软件层面实现的，不同的硬件模块配置了不同的<a href="https://links.jianshu.com/go?to=http://androidxref.com/8.0.0_r4/xref/frameworks/base/core/res/res/xml/power_profile.xml">参数</a>，然后使用算法进行估算，power_profile文件的参数值OEM厂商必须测量并提供前实际值，所以不同的厂商是不一样的。另外获取统计报告的时候需要将统计重置，并断开usb连接（连接时充电影响统计有效性）</p><h3 id="设备耗电报告获取分析"><a href="#设备耗电报告获取分析" class="headerlink" title="设备耗电报告获取分析"></a>设备耗电报告获取分析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认情况下，统计信息是在运行基础上维护的，Android也不记录特定于应用程序的用户空间wakelock转换的时间戳。如果您希望Historian在时间线上显示关于每个单独唤醒锁的详细信息，则应在开始实验之前使用以下命令启用完整唤醒锁报告（启用完全唤醒锁定报告，电池历史记录将在几个小时内溢出。使用此选项进行短时间测试（3-4小时））</span></span><br><span class="line">adb shell dumpsys batterystats --enable full-wake-history</span><br><span class="line"><span class="meta">#</span><span class="bash"> 采集报告前将battery统计状态重置，重置命令结束后断开usb，操作app进行相应活动，测试结束后用获取报告命令导出统计文件包</span></span><br><span class="line">adb shell dumpsys batterystats --reset</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安卓7.0及以上</span></span><br><span class="line">adb bugreport &gt; bugreport.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安卓6.0及以下</span></span><br><span class="line">adb bugreport &gt; bugreport.txt</span><br></pre></td></tr></table></figure><p>报告上传上述服务，可查看分析结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Battery-Historian服务部署&quot;&gt;&lt;a href=&quot;#Battery-Historian服务部署&quot; class=&quot;headerlink&quot; title=&quot;Battery Historian服务部署&quot;&gt;&lt;/a&gt;Battery Historian服务部署&lt;/</summary>
      
    
    
    
    <category term="Test" scheme="https://guobq.github.io/categories/Test/"/>
    
    <category term="专项测试" scheme="https://guobq.github.io/categories/Test/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="专项测试" scheme="https://guobq.github.io/tags/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
